/**
   * @description Inserts a new tree set of items.
   * @returns A boolean, indicating if the tree items could be inserted or not, because the 'nodeId' was found or not.
   */
  @Method()
  async insertTreeItems(
    nodeId: string,
    treeItemsModel: GxgTreeItemData[],
    mode: TreeItemsInsertionMode = "after"
  ): Promise<boolean> {
    if (treeItemsModel?.length && nodeId) {
      const node = this.el.querySelector(`#${nodeId}`);
      if (!node) {
        return false;
      }
      const renderedItems = renderTreeItems(treeItemsModel, false, true);
      if (renderedItems) {
        (node as HTMLGxgTreeItemElement).treeModel = renderedItems as HTMLGxgTreeElement;
        /*Como inserto en el nodo renderedItems ?*/
      }
      return true;
    }
    return false;
  }

  /**
   * @description Deletes a node, along will all the children nodes de node contains.
   * @returns A boolean, indicating if the node could be deleted or not, because the 'nodeId' was found or not.
   */
  @Method()
  async deleteNode(nodeId: string): Promise<boolean> {
    if (nodeId) {
      const node = this.el.querySelector(`#${nodeId}`);
    }
    return true;
  }
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface GxgBaseComponentTemplate {
    /**
    * The kind of base-component-template Possible values: primary, secondary.
    */
    'type': string;
  }
  interface GxgButton {
    /**
    * The state of the button. Whether is disabled or not. Possible values: false, true
    */
    'disabled': boolean;
    /**
    * The kind of button Possible values: primary, secondary, text-only, icon-only
    */
    'type': string;
  }
  interface GxgTab {
    /**
    * The kind of tab Possible values: primary, secondary.
    */
    'type': string;
  }
  interface MyComponent {
    /**
    * The firsty name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
  interface MyOtherComponent {
    /**
    * The firsty name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
}

declare global {


  interface HTMLGxgBaseComponentTemplateElement extends Components.GxgBaseComponentTemplate, HTMLStencilElement {}
  var HTMLGxgBaseComponentTemplateElement: {
    prototype: HTMLGxgBaseComponentTemplateElement;
    new (): HTMLGxgBaseComponentTemplateElement;
  };

  interface HTMLGxgButtonElement extends Components.GxgButton, HTMLStencilElement {}
  var HTMLGxgButtonElement: {
    prototype: HTMLGxgButtonElement;
    new (): HTMLGxgButtonElement;
  };

  interface HTMLGxgTabElement extends Components.GxgTab, HTMLStencilElement {}
  var HTMLGxgTabElement: {
    prototype: HTMLGxgTabElement;
    new (): HTMLGxgTabElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };

  interface HTMLMyOtherComponentElement extends Components.MyOtherComponent, HTMLStencilElement {}
  var HTMLMyOtherComponentElement: {
    prototype: HTMLMyOtherComponentElement;
    new (): HTMLMyOtherComponentElement;
  };
  interface HTMLElementTagNameMap {
    'gxg-base-component-template': HTMLGxgBaseComponentTemplateElement;
    'gxg-button': HTMLGxgButtonElement;
    'gxg-tab': HTMLGxgTabElement;
    'my-component': HTMLMyComponentElement;
    'my-other-component': HTMLMyOtherComponentElement;
  }
}

declare namespace LocalJSX {
  interface GxgBaseComponentTemplate extends JSXBase.HTMLAttributes<HTMLGxgBaseComponentTemplateElement> {
    /**
    * The kind of base-component-template Possible values: primary, secondary.
    */
    'type'?: string;
  }
  interface GxgButton extends JSXBase.HTMLAttributes<HTMLGxgButtonElement> {
    /**
    * The state of the button. Whether is disabled or not. Possible values: false, true
    */
    'disabled'?: boolean;
    /**
    * The kind of button Possible values: primary, secondary, text-only, icon-only
    */
    'type'?: string;
  }
  interface GxgTab extends JSXBase.HTMLAttributes<HTMLGxgTabElement> {
    /**
    * The kind of tab Possible values: primary, secondary.
    */
    'type'?: string;
  }
  interface MyComponent extends JSXBase.HTMLAttributes<HTMLMyComponentElement> {
    /**
    * The firsty name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }
  interface MyOtherComponent extends JSXBase.HTMLAttributes<HTMLMyOtherComponentElement> {
    /**
    * The firsty name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }

  interface IntrinsicElements {
    'gxg-base-component-template': GxgBaseComponentTemplate;
    'gxg-button': GxgButton;
    'gxg-tab': GxgTab;
    'my-component': MyComponent;
    'my-other-component': MyOtherComponent;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}



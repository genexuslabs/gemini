/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { mode } from "./components/accordion/accordion";
import { mode as mode1 } from "./components/accordion/accordion";
import { status } from "./components/accordion-item/accordion-item";
import {
  ActiveTime,
  AlertPosition,
  AlertType,
  Spacing,
} from "./components/alert/alert";
import { background, padding } from "./components/box/box";
import { ButtonType } from "./components/button/button";
import { TitleAlignment } from "./components/button-group/button-group";
import {
  background as background1,
  elevation,
  padding as padding1,
} from "./components/card/card";
import { WidthType } from "./components/column/column";
import { AlignY, CollapseBellow, Space } from "./components/columns/columns";
import { Padding } from "./components/drag-box/drag-box";
import { Padding as Padding1 } from "./components/drag-box/drag-box";
import { Message } from "./components/form-message/form-message";
import {
  IconPosition,
  LabelPosition,
  Style,
} from "./components/form-text/form-text";
import { Color, Size } from "./components/icon/icon";
import { padding as padding2 } from "./components/modal/modal";
import { position, target } from "./components/more-info/more-info";
import { PillType } from "./components/pill/pill";
import { LabelPosition as LabelPosition1 } from "./components/form-select/gxg-select";
import { margin } from "./components/separator/separator";
import {
  JustifyContent,
  Orientation,
  Space as Space1,
} from "./components/spacer-layout/spacer-layout";
import { Direction, Knob } from "./components/splitter/splitter";
import { Space as Space2 } from "./components/stack/stack";
import { LabelPosition as LabelPosition2 } from "./components/stepper/stepper";
import { Height, TabsPosition } from "./components/tabs/tabs";
import { TargetType, TextType } from "./components/text/text";
import { TitleType } from "./components/title/title";
import { position as position1 } from "./components/toolbar/toolbar";
import { position as position2 } from "./components/tooltip/tooltip";
import { DisplayChildren } from "./components/tree-grid-divs/gxg-tree-grid-divs";
export namespace Components {
  interface GxgAccordion {
    /**
     * The presence of this attribute makes all of the accordion-items disabled and not focusable
     */
    disabled: boolean;
    /**
     * The accordion max-width
     */
    maxWidth: string;
    /**
     * The accordion flavor
     */
    mode: mode;
    /**
     * The presence of this attribues removes the padding (internal spacing) from the accordion items containers. This property only applies for the "classical" or "boxed" modes.
     */
    noPadding: boolean;
    /**
     * If this attribute is present, only one accordion-item can be open at the same time
     */
    singleItemOpen: boolean;
  }
  interface GxgAccordionItem {
    /**
     * The presence of this attribute makes the accordion-item disabled and not focusable
     */
    disabled: boolean;
    /**
     * The presence of this attribute makes the accordion title editable
     */
    editableTitle: boolean;
    /**
     * The accordion id
     */
    itemId: string;
    /**
     * The accordion subtitle (optional)
     */
    itemSubtitle: string;
    /**
     * The accordion title
     */
    itemTitle: string;
    /**
     * The accordion flavor (No need to set this attribute on each of the the accordion-item's, only once at gxg-accordion)
     */
    mode: mode;
    /**
     * Set the status to "open" if you want the accordion-item open by default
     */
    status: status;
    /**
     * The accordion title icon
     */
    titleIcon: string;
  }
  interface GxgAlert {
    /**
     * Wether the alert is active (visible) or hidden
     */
    active: boolean;
    /**
     * The amount of time the alert is visible before hidding under the document
     */
    activeTime: ActiveTime;
    /**
     * The spacing between the alert and the bottom side of the document
     */
    bottom: Spacing;
    /**
     * The presence of this attribute makes the component full-width
     */
    fullWidth: boolean;
    /**
     * The spacing between the alert, and the left or right side of the document
     */
    leftRight: Spacing;
    /**
     * The alert position on the X axis
     */
    position: AlertPosition;
    /**
     * The presence of this attribute removes the sound on the 'warning' or 'error' alert
     */
    silent: boolean;
    /**
     * The alert title (optional)
     */
    title: string;
    /**
     * The alert flavor
     */
    type: AlertType;
    /**
     * The alert width
     */
    width: string;
  }
  interface GxgBox {
    /**
     * The background color
     */
    background: background;
    /**
     * Wether the box has border or not
     */
    border: boolean;
    /**
     * The component max. width
     */
    maxWidth: string;
    /**
     * The component min. height
     */
    minHeight: string;
    /**
     * The box padding
     */
    padding: padding;
  }
  interface GxgBreadcrumb {
    /**
     * The breadcrumb icon (optional)
     */
    icon: string;
  }
  interface GxgBreadcrumbs {}
  interface GxgButton {
    /**
     * The prescence of this attribute makes the icon always black
     */
    alwaysBlack: boolean;
    /**
     * The presence of this attribute lets the button styles be editable from outside of the component by referencing the "native-button" part.
     */
    buttonStylesEditable: boolean;
    /**
     * The state of the button, whether it is disabled or not
     */
    disabled: boolean;
    /**
     * The presence of this attribute makes the component full-width
     */
    fullWidth: boolean;
    /**
     * The button icon
     */
    icon: any;
    /**
     * The prescence of this attribute turns the icon white
     */
    negative: boolean;
    /**
     * The kind of button
     */
    type: ButtonType;
  }
  interface GxgButtonGroup {
    /**
     * The button-group title
     */
    buttonGroupTitle: string;
    /**
     * The id of the button that you would like to be active by default
     */
    defaultSelectedBtnId: string;
    /**
     * Wether the button group is disabled or not
     */
    disabled: boolean;
    /**
     * The presence of this attribute makes the component full-width
     */
    fullWidth: boolean;
    /**
     * The presence of this attribute makes the button group outlined
     */
    outlined: boolean;
    /**
     * The button group title alignment
     */
    titleAlignment: TitleAlignment;
  }
  interface GxgCard {
    /**
     * The background color
     */
    background: background;
    /**
     * The card box-shadow
     */
    elevation: elevation;
    /**
     * The component max. width
     */
    maxWidth: string;
    /**
     * The component min. height
     */
    minHeight: string;
    /**
     * The card padding
     */
    padding: padding;
  }
  interface GxgColorPicker {
    /**
     * The label of the color picker (optional)
     */
    label: string;
    /**
     * The color value, such as "red", #CCDDEE, or rgba(220,140,40,.5)
     */
    value: string;
  }
  interface GxgColumn {
    /**
     * The column width value
     */
    width: WidthType;
  }
  interface GxgColumns {
    /**
     * The vertical alignment
     */
    alignY: AlignY;
    /**
     * The collapse breakpoint
     */
    collapseBellow: CollapseBellow;
    /**
     * The spacing between columns
     */
    space: Space;
  }
  interface GxgCombo {
    items: Array<Object>;
  }
  interface GxgContextualMenu {
    /**
     * The presence of this attribute makes the menu visible
     */
    visible: boolean;
  }
  interface GxgContextualMenuItem {
    /**
     * Optional icon
     */
    icon: string;
  }
  interface GxgContextualMenuSubmenu {}
  interface GxgDatePicker {
    /**
     * The presence of this attribute makes the date-picker always visible
     */
    alwaysShow: boolean;
    /**
     * initial date
     */
    defaultDate: string;
    /**
     * The datepicker label
     */
    label: string;
    /**
     * The max. date
     */
    maxDate: string;
    /**
     * The max. width
     */
    maxWidth: string;
    /**
     * The min. date
     */
    minDate: string;
    /**
     * no weekends available
     */
    noWeekends: boolean;
  }
  interface GxgDemo {
    initiateDemo: boolean;
    layerZIndex: number;
    modalMessage: string;
  }
  interface GxgDragBox {
    /**
     * The presence of this attribute makes this box active
     */
    active: boolean;
    /**
     * The presence of this attribute adds a "delete" button that, when pressed, triggers the "deleted" event
     */
    deletable: boolean;
    /**
     * The padding (internal spacing) of the drag-box (Set it on the drag-container to apply the same padding to all of the gxg-drag-box items)
     */
    padding: Padding;
    /**
     * The title
     */
    title: string;
  }
  interface GxgDragContainer {
    /**
     * The presence of this attribute adds a "delete" button to each gxg-drag-box. When pressed, the "deleted" event is emmited.
     */
    deletable: boolean;
    /**
     * The max-width of the box container
     */
    maxWidth: string;
    /**
     * The padding (internal spacing) of the gxg-drag-boxes
     */
    padding: Padding;
  }
  interface GxgFilter {
    /**
     * The left position of the filter, relative to the closest parent with relative position. (optional)
     */
    left: any;
    /**
     * The top position of the filter, relative to the closest parent with relative position. (optional)
     */
    top: any;
  }
  interface GxgFilterItem {
    /**
     * Any icon that belongs to Gemini icon library: https://gx-gemini.netlify.app/?path=/story/icons
     */
    icon: string;
    /**
     * The item-id (required if you want to know that this item was clicked)
     */
    itemId: any;
    /**
     * The type (optional)
     */
    type: any;
  }
  interface GxgFormCheckbox {
    /**
     * The checkbox id
     */
    checkboxId: string;
    /**
     * The presence of this attribute makes the checkbox checked by default
     */
    checked: boolean;
    /**
     * The presence of this attribute disables the checkbox
     */
    disabled: boolean;
    /**
     * The presence of this attribute makes the checkbox indeterminate
     */
    indeterminate: boolean;
    /**
     * The checkbox label
     */
    label: string;
    /**
     * The checkbox name
     */
    name: string;
    /**
     * The checkbox value
     */
    value: string;
  }
  interface GxgFormMessage {
    /**
     * The type of message
     */
    type: Message;
  }
  interface GxgFormRadio {
    /**
     * The radio id
     */
    RadioId: string;
    /**
     * The presence of this attribute makes the radio selected by default
     */
    checked: boolean;
    /**
     * The presence of this attribute disables the radio
     */
    disabled: boolean;
    /**
     * Styles the radio-button with error attributes
     */
    error: boolean;
    /**
     * The radio label
     */
    label: string;
    /**
     * The radio name (should be the same for every radio of the same radio-group)
     */
    name: string;
    /**
     * The radio value
     */
    value: string;
  }
  interface GxgFormRadioGroup {
    /**
     * The radio group label
     */
    label: string;
    /**
     * Make the radio-buttons required
     */
    required: boolean;
    /**
     * The required message if this input is required and no value is provided (optional). If this is not provided, the default browser required message will show up
     */
    requiredMessage: string;
  }
  interface GxgFormText {
    /**
     * The presence of this attribute displays a clear (cross) button-icon on the right side
     */
    clearButton: boolean;
    /**
     * The presence of this attribute makes the input disabled
     */
    disabled: boolean;
    /**
     * The presence of this attribute gives the component error styles
     */
    error: boolean;
    /**
     * The input icon (optional)
     */
    icon: any;
    /**
     * The input icon side
     */
    iconPosition: IconPosition;
    /**
     * The input label
     */
    label: string;
    /**
     * The input label
     */
    labelPosition: LabelPosition;
    /**
     * The input max. width
     */
    maxWidth: string;
    /**
     * The presence of this attribute hides the border, and sets the background to transparent when the element has no focus
     */
    minimal: boolean;
    /**
     * The presence of this attribute sets the text color to white. Usefull when "minimal" attribute is applied and the background behind the input is dark
     */
    overDarkBackground: boolean;
    /**
     * The presence of this attribute sets the input type as password
     */
    password: boolean;
    /**
     * The input placeholder
     */
    placeholder: string;
    /**
     * The presence of this attribute makes this input required
     */
    required: boolean;
    /**
     * The required message if this input is required and no value is provided (optional). If this is not provided, the default browser required message will show up
     */
    requiredMessage: string;
    /**
     * The text style
     */
    textStyle: Style;
    /**
     * The input value
     */
    value: string;
    /**
     * The presence of this attribute gives the component warning styles
     */
    warning: boolean;
  }
  interface GxgFormTextarea {
    /**
     * The presence of this attribute makes the textarea disabled
     */
    disabled: boolean;
    /**
     * The presence of this attribute gives the component error styles
     */
    error: boolean;
    /**
     * The textarea label
     */
    label: string;
    /**
     * The max-width
     */
    maxWidth: string;
    /**
     * The textarea placeholder
     */
    placeholder: string;
    /**
     * The presence of this attribute makes the textarea required
     */
    required: boolean;
    /**
     * The required message if this input is required and no value is provided (optional). If this is not provided, the default browser required message will show up
     */
    requiredMessage: string;
    /**
     * The number of rows
     */
    rows: number;
    /**
     * The textarea value
     */
    value: string;
    /**
     * The presence of this attribute gives the component warning styles
     */
    warning: boolean;
  }
  interface GxgIcon {
    /**
     * The color of the icon.
     */
    color: Color;
    /**
     * The size of the icon. Possible values: regular, small.
     */
    size: Size;
    /**
     * The type of icon.
     */
    type: any;
  }
  interface GxgLoader {
    /**
     * The prescence of this attribute shows the loader
     */
    show: boolean;
    /**
     * The text you want to show under the loader (optional)
     */
    text: string;
    /**
     * The z-index positive value you want for the loader when visible (default: 100)
     */
    visibleZIndex: string;
  }
  interface GxgMenu {
    /**
     * The menu title
     */
    menuTitle: string;
    /**
     * Provide this attribute if you are using this menu on the tabs component
     */
    tabs: boolean;
  }
  interface GxgMenuItem {
    active: boolean;
    icon: string;
    label: string;
  }
  interface GxgModal {
    /**
     * The footer justify content type
     */
    footerJustifyContent: string;
    /**
     * The modal title
     */
    modalTitle: string;
    padding: padding;
    /**
     * The presence of this attribute removes the sound that plays when the modal appears
     */
    silent: boolean;
    /**
     * Wether the modal is visible or not
     */
    visible: boolean;
    /**
     * The modal width
     */
    width: string;
    /**
     * The z-index value of the modal
     */
    zIndex: string;
  }
  interface GxgMoreInfo {
    /**
     * The label
     */
    label: string;
    /**
     * (Optional) The "more-info" label. This property goes along with "url" attribute
     */
    moreInfoLabel: string;
    /**
     * the tooltip position
     */
    position: position;
    /**
     * The url target
     */
    target: target;
    /**
     * (Optional) The "more-info" url.
     */
    url: string;
  }
  interface GxgOption {
    /**
     * The presence of this attribute makes the option selected by default
     */
    selected: boolean;
    /**
     * The value
     */
    value: string;
  }
  interface GxgPill {
    /**
     * The presence of this attribute disables the pillgit a
     */
    disabled: boolean;
    /**
     * The presence of this attribute sets auto-height. Usefull when the text overflows.
     */
    heightAuto: boolean;
    /**
     * The icon
     */
    icon: string;
    /**
     * The type of pill
     */
    type: PillType;
  }
  interface GxgProgressBar {
    /**
     * The state of the progress-bar, whether it is disabled or not.
     */
    disabled: boolean;
    /**
     * The progress-bar label
     */
    label: string;
    /**
     * The max. width
     */
    maxWidth: string;
    /**
     * The presence of this attribute removes the sound that plays when the progress-bar finishes
     */
    silent: boolean;
    /**
     * The progress value (percentage)
     */
    value: number;
  }
  interface GxgScroll {
    /**
     * Max height
     */
    maxHeight: string;
  }
  interface GxgSelect {
    /**
     * The presence of this attribute disables the component
     */
    disabled: boolean;
    /**
     * The presence of this attribute stylizes the component with error attributes
     */
    error: boolean;
    /**
     * The select label
     */
    label: string;
    /**
     * The input label
     */
    labelPosition: LabelPosition;
    /**
     * The select max. width
     */
    maxWidth: string;
    /**
     * The presence of this attribute hides the border, and sets the background to transparent when the element has no focus
     */
    minimal: boolean;
    /**
     * The presence of this attribute makes this input required
     */
    required: boolean;
    /**
     * The maximum number of visible options
     */
    size: string;
    /**
     * This holds the value of the selected option
     */
    value: string;
    /**
     * The presence of this attribute stylizes the component with warning attributes
     */
    warning: boolean;
  }
  interface GxgSeparator {
    /**
     * The hr top and bottom margin
     */
    margin: margin;
    /**
     * The hr style
     */
    type: string;
  }
  interface GxgSlider {
    /**
     * The state of the slider, whether is disabled or not.
     */
    disabled: boolean;
    /**
     * The label
     */
    label: string;
    /**
     * The max. value
     */
    max: number;
    /**
     * The slider max. width
     */
    maxWidth: string;
    /**
     * The initial value
     */
    value: number;
  }
  interface GxgSpacerLayout {
    /**
     * Add this attribute to make the spacer-layout full height
     */
    fullHeight: boolean;
    /**
     * Content justify
     */
    justifyContent: JustifyContent;
    /**
     * The orientation
     */
    orientation: Orientation;
    /**
     * The spacing value, taken from the "token-spacing" global values
     */
    space: Space;
  }
  interface GxgSpacerOne {
    /**
     * The spacing value, taken from the "token-spacing" global values
     */
    space: string;
  }
  interface GxgSplit {}
  interface GxgSplitter {
    /**
     * This method allows to collapse the split passsed as argument
     */
    collapse: (split: number) => Promise<void>;
    /**
     * The splitter direction test
     */
    direction: Direction;
    /**
     * The type of knob
     */
    knob: Knob;
    /**
     * The splitter min. sizes in pixels
     */
    minSize: string;
    /**
     * The splitter initial sizes, in percentages. The sum should equal 100
     */
    sizes: string;
  }
  interface GxgStack {
    /**
     * The spacing value
     */
    space: Space;
  }
  interface GxgStepper {
    /**
     * The state of the stepper, whether is disabled or not.
     */
    disabled: boolean;
    /**
     * The label
     */
    label: string;
    /**
     * The label position
     */
    labelPosition: LabelPosition;
    /**
     * The max. value
     */
    max: number;
    /**
     * The min. value
     */
    min: number;
    /**
     * The initial vaule
     */
    value: number;
  }
  interface GxgTab {
    /**
     * The selected tab
     */
    isSelected: boolean;
    /**
     * The tab id. Should match the "tab" value of the correlative "gxg-tab"
     */
    tab: string;
  }
  interface GxgTabBar {}
  interface GxgTabButton {
    /**
     * Provide this attribute to make this button disabled
     */
    disabled: boolean;
    /**
     * (Optional) provide an icon to this button
     */
    icon: string;
    /**
     * Provide this attribute to make this button selected by default
     */
    isSelected: boolean;
    /**
     * The tab id. Must be unique, and match the "tab" value of the correlative "gxg-tab" element
     */
    tab: string;
    /**
     * The button label
     */
    tabLabel: string;
  }
  interface GxgTabs {
    height: Height;
    position: TabsPosition;
  }
  interface GxgTemplate {
    name: string;
  }
  interface GxgTest {}
  interface GxgText {
    /**
     * The href (for "link" or "link-gray" types
     */
    href: string;
    /**
     * The target (for "link" or "link-gray" types
     */
    target: TargetType;
    /**
     * Title type
     */
    type: TextType;
  }
  interface GxgTitle {
    /**
     * Title type
     */
    type: TitleType;
  }
  interface GxgToggle {
    /**
     * The state of the toggle. Whether is disabled or not.
     */
    disabled: boolean;
    /**
     * The label
     */
    label: string;
    /**
     * If the toggle is active or not
     */
    on: boolean;
  }
  interface GxgToolbar {
    /**
     * The toggle arrow position
     */
    position: position;
    /**
     * The toolbar title
     */
    subtitle: string;
    /**
     * The toolbar subtitle
     */
    toolbarTitle: string;
  }
  interface GxgToolbarItem {
    /**
     * The state of the toolbar-item, whether it is disabled or not
     */
    disabled: boolean;
    /**
     * The toolbar-item icon
     */
    icon: string;
    /**
     * The toolbar-item subtitle
     */
    subtitle: string;
    /**
     * The toolbar-item title
     */
    toolbarItemTitle: string;
  }
  interface GxgTooltip {
    /**
     * The label
     */
    label: string;
    /**
     * This presence of this property removes the border under the text
     */
    noBorder: boolean;
    /**
     * the tooltip position
     */
    position: position;
  }
  interface GxgTree {
    /**
     * Set this attribute if you want all this tree tree-items to have a checkbox
     */
    checkbox: boolean;
    /**
     * Set this attribute if you want all this tree tree-items to have the checkbox checked
     */
    checked: boolean;
    /**
     * Set this attribute if you want all the childen item's checkboxes to be checked when the parent item checkbox is checked, or to be unchecked when the parent item checkbox is unckecked.
     */
    toggleCheckboxes: boolean;
  }
  interface GxgTreeGridDivs {
    columns: Array<object>;
    displayChildren: DisplayChildren;
    editCell: { rowId: number; columnName: string };
    rows: Array<object>;
    selectedRowsIds: number;
    width: string;
  }
  interface GxgTreeItem {
    /**
     * Set this attribute if you want the gxg-treeitem to display a checkbox
     */
    checkbox: boolean;
    /**
     * Set this attribute if you want the gxg-treeitem checkbox to be checked by default
     */
    checked: boolean;
    disabled: boolean;
    /**
     * Set this attribute if this tree-item has a resource to be downloaded;
     */
    download: boolean;
    /**
     * Set this attribute when you have downloaded the resource
     */
    downloaded: boolean;
    /**
     * Set this attribute when you are downloading a resource
     */
    downloading: boolean;
    firstTreeItem: boolean;
    hasChildTree: boolean;
    indeterminate: boolean;
    /**
     * The presence of this attribute displays a +/- icon to toggle/untoggle the tree
     */
    isLeaf: boolean;
    /**
     * Set the left side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
     */
    leftIcon: string;
    /**
     * If this tree-item has a nested tree, set this attribute to make the tree open by default
     */
    opened: boolean;
    /**
     * Set thhe right side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
     */
    rightIcon: string;
    /**
     * The presence of this attribute sets the tree-item as selected
     */
    selected: boolean;
    updateTreeVerticalLineHeight: () => Promise<void>;
  }
}
declare global {
  interface HTMLGxgAccordionElement
    extends Components.GxgAccordion,
      HTMLStencilElement {}
  var HTMLGxgAccordionElement: {
    prototype: HTMLGxgAccordionElement;
    new (): HTMLGxgAccordionElement;
  };
  interface HTMLGxgAccordionItemElement
    extends Components.GxgAccordionItem,
      HTMLStencilElement {}
  var HTMLGxgAccordionItemElement: {
    prototype: HTMLGxgAccordionItemElement;
    new (): HTMLGxgAccordionItemElement;
  };
  interface HTMLGxgAlertElement
    extends Components.GxgAlert,
      HTMLStencilElement {}
  var HTMLGxgAlertElement: {
    prototype: HTMLGxgAlertElement;
    new (): HTMLGxgAlertElement;
  };
  interface HTMLGxgBoxElement extends Components.GxgBox, HTMLStencilElement {}
  var HTMLGxgBoxElement: {
    prototype: HTMLGxgBoxElement;
    new (): HTMLGxgBoxElement;
  };
  interface HTMLGxgBreadcrumbElement
    extends Components.GxgBreadcrumb,
      HTMLStencilElement {}
  var HTMLGxgBreadcrumbElement: {
    prototype: HTMLGxgBreadcrumbElement;
    new (): HTMLGxgBreadcrumbElement;
  };
  interface HTMLGxgBreadcrumbsElement
    extends Components.GxgBreadcrumbs,
      HTMLStencilElement {}
  var HTMLGxgBreadcrumbsElement: {
    prototype: HTMLGxgBreadcrumbsElement;
    new (): HTMLGxgBreadcrumbsElement;
  };
  interface HTMLGxgButtonElement
    extends Components.GxgButton,
      HTMLStencilElement {}
  var HTMLGxgButtonElement: {
    prototype: HTMLGxgButtonElement;
    new (): HTMLGxgButtonElement;
  };
  interface HTMLGxgButtonGroupElement
    extends Components.GxgButtonGroup,
      HTMLStencilElement {}
  var HTMLGxgButtonGroupElement: {
    prototype: HTMLGxgButtonGroupElement;
    new (): HTMLGxgButtonGroupElement;
  };
  interface HTMLGxgCardElement extends Components.GxgCard, HTMLStencilElement {}
  var HTMLGxgCardElement: {
    prototype: HTMLGxgCardElement;
    new (): HTMLGxgCardElement;
  };
  interface HTMLGxgColorPickerElement
    extends Components.GxgColorPicker,
      HTMLStencilElement {}
  var HTMLGxgColorPickerElement: {
    prototype: HTMLGxgColorPickerElement;
    new (): HTMLGxgColorPickerElement;
  };
  interface HTMLGxgColumnElement
    extends Components.GxgColumn,
      HTMLStencilElement {}
  var HTMLGxgColumnElement: {
    prototype: HTMLGxgColumnElement;
    new (): HTMLGxgColumnElement;
  };
  interface HTMLGxgColumnsElement
    extends Components.GxgColumns,
      HTMLStencilElement {}
  var HTMLGxgColumnsElement: {
    prototype: HTMLGxgColumnsElement;
    new (): HTMLGxgColumnsElement;
  };
  interface HTMLGxgComboElement
    extends Components.GxgCombo,
      HTMLStencilElement {}
  var HTMLGxgComboElement: {
    prototype: HTMLGxgComboElement;
    new (): HTMLGxgComboElement;
  };
  interface HTMLGxgContextualMenuElement
    extends Components.GxgContextualMenu,
      HTMLStencilElement {}
  var HTMLGxgContextualMenuElement: {
    prototype: HTMLGxgContextualMenuElement;
    new (): HTMLGxgContextualMenuElement;
  };
  interface HTMLGxgContextualMenuItemElement
    extends Components.GxgContextualMenuItem,
      HTMLStencilElement {}
  var HTMLGxgContextualMenuItemElement: {
    prototype: HTMLGxgContextualMenuItemElement;
    new (): HTMLGxgContextualMenuItemElement;
  };
  interface HTMLGxgContextualMenuSubmenuElement
    extends Components.GxgContextualMenuSubmenu,
      HTMLStencilElement {}
  var HTMLGxgContextualMenuSubmenuElement: {
    prototype: HTMLGxgContextualMenuSubmenuElement;
    new (): HTMLGxgContextualMenuSubmenuElement;
  };
  interface HTMLGxgDatePickerElement
    extends Components.GxgDatePicker,
      HTMLStencilElement {}
  var HTMLGxgDatePickerElement: {
    prototype: HTMLGxgDatePickerElement;
    new (): HTMLGxgDatePickerElement;
  };
  interface HTMLGxgDemoElement extends Components.GxgDemo, HTMLStencilElement {}
  var HTMLGxgDemoElement: {
    prototype: HTMLGxgDemoElement;
    new (): HTMLGxgDemoElement;
  };
  interface HTMLGxgDragBoxElement
    extends Components.GxgDragBox,
      HTMLStencilElement {}
  var HTMLGxgDragBoxElement: {
    prototype: HTMLGxgDragBoxElement;
    new (): HTMLGxgDragBoxElement;
  };
  interface HTMLGxgDragContainerElement
    extends Components.GxgDragContainer,
      HTMLStencilElement {}
  var HTMLGxgDragContainerElement: {
    prototype: HTMLGxgDragContainerElement;
    new (): HTMLGxgDragContainerElement;
  };
  interface HTMLGxgFilterElement
    extends Components.GxgFilter,
      HTMLStencilElement {}
  var HTMLGxgFilterElement: {
    prototype: HTMLGxgFilterElement;
    new (): HTMLGxgFilterElement;
  };
  interface HTMLGxgFilterItemElement
    extends Components.GxgFilterItem,
      HTMLStencilElement {}
  var HTMLGxgFilterItemElement: {
    prototype: HTMLGxgFilterItemElement;
    new (): HTMLGxgFilterItemElement;
  };
  interface HTMLGxgFormCheckboxElement
    extends Components.GxgFormCheckbox,
      HTMLStencilElement {}
  var HTMLGxgFormCheckboxElement: {
    prototype: HTMLGxgFormCheckboxElement;
    new (): HTMLGxgFormCheckboxElement;
  };
  interface HTMLGxgFormMessageElement
    extends Components.GxgFormMessage,
      HTMLStencilElement {}
  var HTMLGxgFormMessageElement: {
    prototype: HTMLGxgFormMessageElement;
    new (): HTMLGxgFormMessageElement;
  };
  interface HTMLGxgFormRadioElement
    extends Components.GxgFormRadio,
      HTMLStencilElement {}
  var HTMLGxgFormRadioElement: {
    prototype: HTMLGxgFormRadioElement;
    new (): HTMLGxgFormRadioElement;
  };
  interface HTMLGxgFormRadioGroupElement
    extends Components.GxgFormRadioGroup,
      HTMLStencilElement {}
  var HTMLGxgFormRadioGroupElement: {
    prototype: HTMLGxgFormRadioGroupElement;
    new (): HTMLGxgFormRadioGroupElement;
  };
  interface HTMLGxgFormTextElement
    extends Components.GxgFormText,
      HTMLStencilElement {}
  var HTMLGxgFormTextElement: {
    prototype: HTMLGxgFormTextElement;
    new (): HTMLGxgFormTextElement;
  };
  interface HTMLGxgFormTextareaElement
    extends Components.GxgFormTextarea,
      HTMLStencilElement {}
  var HTMLGxgFormTextareaElement: {
    prototype: HTMLGxgFormTextareaElement;
    new (): HTMLGxgFormTextareaElement;
  };
  interface HTMLGxgIconElement extends Components.GxgIcon, HTMLStencilElement {}
  var HTMLGxgIconElement: {
    prototype: HTMLGxgIconElement;
    new (): HTMLGxgIconElement;
  };
  interface HTMLGxgLoaderElement
    extends Components.GxgLoader,
      HTMLStencilElement {}
  var HTMLGxgLoaderElement: {
    prototype: HTMLGxgLoaderElement;
    new (): HTMLGxgLoaderElement;
  };
  interface HTMLGxgMenuElement extends Components.GxgMenu, HTMLStencilElement {}
  var HTMLGxgMenuElement: {
    prototype: HTMLGxgMenuElement;
    new (): HTMLGxgMenuElement;
  };
  interface HTMLGxgMenuItemElement
    extends Components.GxgMenuItem,
      HTMLStencilElement {}
  var HTMLGxgMenuItemElement: {
    prototype: HTMLGxgMenuItemElement;
    new (): HTMLGxgMenuItemElement;
  };
  interface HTMLGxgModalElement
    extends Components.GxgModal,
      HTMLStencilElement {}
  var HTMLGxgModalElement: {
    prototype: HTMLGxgModalElement;
    new (): HTMLGxgModalElement;
  };
  interface HTMLGxgMoreInfoElement
    extends Components.GxgMoreInfo,
      HTMLStencilElement {}
  var HTMLGxgMoreInfoElement: {
    prototype: HTMLGxgMoreInfoElement;
    new (): HTMLGxgMoreInfoElement;
  };
  interface HTMLGxgOptionElement
    extends Components.GxgOption,
      HTMLStencilElement {}
  var HTMLGxgOptionElement: {
    prototype: HTMLGxgOptionElement;
    new (): HTMLGxgOptionElement;
  };
  interface HTMLGxgPillElement extends Components.GxgPill, HTMLStencilElement {}
  var HTMLGxgPillElement: {
    prototype: HTMLGxgPillElement;
    new (): HTMLGxgPillElement;
  };
  interface HTMLGxgProgressBarElement
    extends Components.GxgProgressBar,
      HTMLStencilElement {}
  var HTMLGxgProgressBarElement: {
    prototype: HTMLGxgProgressBarElement;
    new (): HTMLGxgProgressBarElement;
  };
  interface HTMLGxgScrollElement
    extends Components.GxgScroll,
      HTMLStencilElement {}
  var HTMLGxgScrollElement: {
    prototype: HTMLGxgScrollElement;
    new (): HTMLGxgScrollElement;
  };
  interface HTMLGxgSelectElement
    extends Components.GxgSelect,
      HTMLStencilElement {}
  var HTMLGxgSelectElement: {
    prototype: HTMLGxgSelectElement;
    new (): HTMLGxgSelectElement;
  };
  interface HTMLGxgSeparatorElement
    extends Components.GxgSeparator,
      HTMLStencilElement {}
  var HTMLGxgSeparatorElement: {
    prototype: HTMLGxgSeparatorElement;
    new (): HTMLGxgSeparatorElement;
  };
  interface HTMLGxgSliderElement
    extends Components.GxgSlider,
      HTMLStencilElement {}
  var HTMLGxgSliderElement: {
    prototype: HTMLGxgSliderElement;
    new (): HTMLGxgSliderElement;
  };
  interface HTMLGxgSpacerLayoutElement
    extends Components.GxgSpacerLayout,
      HTMLStencilElement {}
  var HTMLGxgSpacerLayoutElement: {
    prototype: HTMLGxgSpacerLayoutElement;
    new (): HTMLGxgSpacerLayoutElement;
  };
  interface HTMLGxgSpacerOneElement
    extends Components.GxgSpacerOne,
      HTMLStencilElement {}
  var HTMLGxgSpacerOneElement: {
    prototype: HTMLGxgSpacerOneElement;
    new (): HTMLGxgSpacerOneElement;
  };
  interface HTMLGxgSplitElement
    extends Components.GxgSplit,
      HTMLStencilElement {}
  var HTMLGxgSplitElement: {
    prototype: HTMLGxgSplitElement;
    new (): HTMLGxgSplitElement;
  };
  interface HTMLGxgSplitterElement
    extends Components.GxgSplitter,
      HTMLStencilElement {}
  var HTMLGxgSplitterElement: {
    prototype: HTMLGxgSplitterElement;
    new (): HTMLGxgSplitterElement;
  };
  interface HTMLGxgStackElement
    extends Components.GxgStack,
      HTMLStencilElement {}
  var HTMLGxgStackElement: {
    prototype: HTMLGxgStackElement;
    new (): HTMLGxgStackElement;
  };
  interface HTMLGxgStepperElement
    extends Components.GxgStepper,
      HTMLStencilElement {}
  var HTMLGxgStepperElement: {
    prototype: HTMLGxgStepperElement;
    new (): HTMLGxgStepperElement;
  };
  interface HTMLGxgTabElement extends Components.GxgTab, HTMLStencilElement {}
  var HTMLGxgTabElement: {
    prototype: HTMLGxgTabElement;
    new (): HTMLGxgTabElement;
  };
  interface HTMLGxgTabBarElement
    extends Components.GxgTabBar,
      HTMLStencilElement {}
  var HTMLGxgTabBarElement: {
    prototype: HTMLGxgTabBarElement;
    new (): HTMLGxgTabBarElement;
  };
  interface HTMLGxgTabButtonElement
    extends Components.GxgTabButton,
      HTMLStencilElement {}
  var HTMLGxgTabButtonElement: {
    prototype: HTMLGxgTabButtonElement;
    new (): HTMLGxgTabButtonElement;
  };
  interface HTMLGxgTabsElement extends Components.GxgTabs, HTMLStencilElement {}
  var HTMLGxgTabsElement: {
    prototype: HTMLGxgTabsElement;
    new (): HTMLGxgTabsElement;
  };
  interface HTMLGxgTemplateElement
    extends Components.GxgTemplate,
      HTMLStencilElement {}
  var HTMLGxgTemplateElement: {
    prototype: HTMLGxgTemplateElement;
    new (): HTMLGxgTemplateElement;
  };
  interface HTMLGxgTestElement extends Components.GxgTest, HTMLStencilElement {}
  var HTMLGxgTestElement: {
    prototype: HTMLGxgTestElement;
    new (): HTMLGxgTestElement;
  };
  interface HTMLGxgTextElement extends Components.GxgText, HTMLStencilElement {}
  var HTMLGxgTextElement: {
    prototype: HTMLGxgTextElement;
    new (): HTMLGxgTextElement;
  };
  interface HTMLGxgTitleElement
    extends Components.GxgTitle,
      HTMLStencilElement {}
  var HTMLGxgTitleElement: {
    prototype: HTMLGxgTitleElement;
    new (): HTMLGxgTitleElement;
  };
  interface HTMLGxgToggleElement
    extends Components.GxgToggle,
      HTMLStencilElement {}
  var HTMLGxgToggleElement: {
    prototype: HTMLGxgToggleElement;
    new (): HTMLGxgToggleElement;
  };
  interface HTMLGxgToolbarElement
    extends Components.GxgToolbar,
      HTMLStencilElement {}
  var HTMLGxgToolbarElement: {
    prototype: HTMLGxgToolbarElement;
    new (): HTMLGxgToolbarElement;
  };
  interface HTMLGxgToolbarItemElement
    extends Components.GxgToolbarItem,
      HTMLStencilElement {}
  var HTMLGxgToolbarItemElement: {
    prototype: HTMLGxgToolbarItemElement;
    new (): HTMLGxgToolbarItemElement;
  };
  interface HTMLGxgTooltipElement
    extends Components.GxgTooltip,
      HTMLStencilElement {}
  var HTMLGxgTooltipElement: {
    prototype: HTMLGxgTooltipElement;
    new (): HTMLGxgTooltipElement;
  };
  interface HTMLGxgTreeElement extends Components.GxgTree, HTMLStencilElement {}
  var HTMLGxgTreeElement: {
    prototype: HTMLGxgTreeElement;
    new (): HTMLGxgTreeElement;
  };
  interface HTMLGxgTreeGridDivsElement
    extends Components.GxgTreeGridDivs,
      HTMLStencilElement {}
  var HTMLGxgTreeGridDivsElement: {
    prototype: HTMLGxgTreeGridDivsElement;
    new (): HTMLGxgTreeGridDivsElement;
  };
  interface HTMLGxgTreeItemElement
    extends Components.GxgTreeItem,
      HTMLStencilElement {}
  var HTMLGxgTreeItemElement: {
    prototype: HTMLGxgTreeItemElement;
    new (): HTMLGxgTreeItemElement;
  };
  interface HTMLElementTagNameMap {
    "gxg-accordion": HTMLGxgAccordionElement;
    "gxg-accordion-item": HTMLGxgAccordionItemElement;
    "gxg-alert": HTMLGxgAlertElement;
    "gxg-box": HTMLGxgBoxElement;
    "gxg-breadcrumb": HTMLGxgBreadcrumbElement;
    "gxg-breadcrumbs": HTMLGxgBreadcrumbsElement;
    "gxg-button": HTMLGxgButtonElement;
    "gxg-button-group": HTMLGxgButtonGroupElement;
    "gxg-card": HTMLGxgCardElement;
    "gxg-color-picker": HTMLGxgColorPickerElement;
    "gxg-column": HTMLGxgColumnElement;
    "gxg-columns": HTMLGxgColumnsElement;
    "gxg-combo": HTMLGxgComboElement;
    "gxg-contextual-menu": HTMLGxgContextualMenuElement;
    "gxg-contextual-menu-item": HTMLGxgContextualMenuItemElement;
    "gxg-contextual-menu-submenu": HTMLGxgContextualMenuSubmenuElement;
    "gxg-date-picker": HTMLGxgDatePickerElement;
    "gxg-demo": HTMLGxgDemoElement;
    "gxg-drag-box": HTMLGxgDragBoxElement;
    "gxg-drag-container": HTMLGxgDragContainerElement;
    "gxg-filter": HTMLGxgFilterElement;
    "gxg-filter-item": HTMLGxgFilterItemElement;
    "gxg-form-checkbox": HTMLGxgFormCheckboxElement;
    "gxg-form-message": HTMLGxgFormMessageElement;
    "gxg-form-radio": HTMLGxgFormRadioElement;
    "gxg-form-radio-group": HTMLGxgFormRadioGroupElement;
    "gxg-form-text": HTMLGxgFormTextElement;
    "gxg-form-textarea": HTMLGxgFormTextareaElement;
    "gxg-icon": HTMLGxgIconElement;
    "gxg-loader": HTMLGxgLoaderElement;
    "gxg-menu": HTMLGxgMenuElement;
    "gxg-menu-item": HTMLGxgMenuItemElement;
    "gxg-modal": HTMLGxgModalElement;
    "gxg-more-info": HTMLGxgMoreInfoElement;
    "gxg-option": HTMLGxgOptionElement;
    "gxg-pill": HTMLGxgPillElement;
    "gxg-progress-bar": HTMLGxgProgressBarElement;
    "gxg-scroll": HTMLGxgScrollElement;
    "gxg-select": HTMLGxgSelectElement;
    "gxg-separator": HTMLGxgSeparatorElement;
    "gxg-slider": HTMLGxgSliderElement;
    "gxg-spacer-layout": HTMLGxgSpacerLayoutElement;
    "gxg-spacer-one": HTMLGxgSpacerOneElement;
    "gxg-split": HTMLGxgSplitElement;
    "gxg-splitter": HTMLGxgSplitterElement;
    "gxg-stack": HTMLGxgStackElement;
    "gxg-stepper": HTMLGxgStepperElement;
    "gxg-tab": HTMLGxgTabElement;
    "gxg-tab-bar": HTMLGxgTabBarElement;
    "gxg-tab-button": HTMLGxgTabButtonElement;
    "gxg-tabs": HTMLGxgTabsElement;
    "gxg-template": HTMLGxgTemplateElement;
    "gxg-test": HTMLGxgTestElement;
    "gxg-text": HTMLGxgTextElement;
    "gxg-title": HTMLGxgTitleElement;
    "gxg-toggle": HTMLGxgToggleElement;
    "gxg-toolbar": HTMLGxgToolbarElement;
    "gxg-toolbar-item": HTMLGxgToolbarItemElement;
    "gxg-tooltip": HTMLGxgTooltipElement;
    "gxg-tree": HTMLGxgTreeElement;
    "gxg-tree-grid-divs": HTMLGxgTreeGridDivsElement;
    "gxg-tree-item": HTMLGxgTreeItemElement;
  }
}
declare namespace LocalJSX {
  interface GxgAccordion {
    /**
     * The presence of this attribute makes all of the accordion-items disabled and not focusable
     */
    disabled?: boolean;
    /**
     * The accordion max-width
     */
    maxWidth?: string;
    /**
     * The accordion flavor
     */
    mode?: mode;
    /**
     * The presence of this attribues removes the padding (internal spacing) from the accordion items containers. This property only applies for the "classical" or "boxed" modes.
     */
    noPadding?: boolean;
    /**
     * If this attribute is present, only one accordion-item can be open at the same time
     */
    singleItemOpen?: boolean;
  }
  interface GxgAccordionItem {
    /**
     * The presence of this attribute makes the accordion-item disabled and not focusable
     */
    disabled?: boolean;
    /**
     * The presence of this attribute makes the accordion title editable
     */
    editableTitle?: boolean;
    /**
     * The accordion id
     */
    itemId: string;
    /**
     * The accordion subtitle (optional)
     */
    itemSubtitle?: string;
    /**
     * The accordion title
     */
    itemTitle?: string;
    /**
     * The accordion flavor (No need to set this attribute on each of the the accordion-item's, only once at gxg-accordion)
     */
    mode?: mode;
    /**
     * This event is for internal use
     */
    onAccordionItemClicked?: (event: CustomEvent<any>) => void;
    /**
     * This event is for internal use
     */
    onAccordionItemLoaded?: (event: CustomEvent<any>) => void;
    /**
     * Subscribe to this event to know when the "title" was clicked
     */
    onAccordionTitleClicked?: (event: CustomEvent<any>) => void;
    /**
     * If "editable-title" attribute is present, this event emmits the title value when it has changed
     */
    onTitleChanged?: (event: CustomEvent<any>) => void;
    /**
     * Set the status to "open" if you want the accordion-item open by default
     */
    status?: status;
    /**
     * The accordion title icon
     */
    titleIcon?: string;
  }
  interface GxgAlert {
    /**
     * Wether the alert is active (visible) or hidden
     */
    active?: boolean;
    /**
     * The amount of time the alert is visible before hidding under the document
     */
    activeTime?: ActiveTime;
    /**
     * The spacing between the alert and the bottom side of the document
     */
    bottom?: Spacing;
    /**
     * The presence of this attribute makes the component full-width
     */
    fullWidth?: boolean;
    /**
     * The spacing between the alert, and the left or right side of the document
     */
    leftRight?: Spacing;
    /**
     * The alert position on the X axis
     */
    position?: AlertPosition;
    /**
     * The presence of this attribute removes the sound on the 'warning' or 'error' alert
     */
    silent?: boolean;
    /**
     * The alert title (optional)
     */
    title?: string;
    /**
     * The alert flavor
     */
    type?: AlertType;
    /**
     * The alert width
     */
    width?: string;
  }
  interface GxgBox {
    /**
     * The background color
     */
    background?: background;
    /**
     * Wether the box has border or not
     */
    border?: boolean;
    /**
     * The component max. width
     */
    maxWidth?: string;
    /**
     * The component min. height
     */
    minHeight?: string;
    /**
     * The box padding
     */
    padding?: padding;
  }
  interface GxgBreadcrumb {
    /**
     * The breadcrumb icon (optional)
     */
    icon?: string;
    /**
     * This event emmits the breadcrumb index
     */
    onBreadcrumbClicked?: (event: CustomEvent<any>) => void;
  }
  interface GxgBreadcrumbs {}
  interface GxgButton {
    /**
     * The prescence of this attribute makes the icon always black
     */
    alwaysBlack?: boolean;
    /**
     * The presence of this attribute lets the button styles be editable from outside of the component by referencing the "native-button" part.
     */
    buttonStylesEditable?: boolean;
    /**
     * The state of the button, whether it is disabled or not
     */
    disabled?: boolean;
    /**
     * The presence of this attribute makes the component full-width
     */
    fullWidth?: boolean;
    /**
     * The button icon
     */
    icon?: any;
    /**
     * The prescence of this attribute turns the icon white
     */
    negative?: boolean;
    /**
     * The kind of button
     */
    type?: ButtonType;
  }
  interface GxgButtonGroup {
    /**
     * The button-group title
     */
    buttonGroupTitle?: string;
    /**
     * The id of the button that you would like to be active by default
     */
    defaultSelectedBtnId?: string;
    /**
     * Wether the button group is disabled or not
     */
    disabled?: boolean;
    /**
     * The presence of this attribute makes the component full-width
     */
    fullWidth?: boolean;
    /**
     * The presence of this attribute makes the button group outlined
     */
    outlined?: boolean;
    /**
     * The button group title alignment
     */
    titleAlignment?: TitleAlignment;
  }
  interface GxgCard {
    /**
     * The background color
     */
    background?: background;
    /**
     * The card box-shadow
     */
    elevation?: elevation;
    /**
     * The component max. width
     */
    maxWidth?: string;
    /**
     * The component min. height
     */
    minHeight?: string;
    /**
     * The card padding
     */
    padding?: padding;
  }
  interface GxgColorPicker {
    /**
     * The label of the color picker (optional)
     */
    label?: string;
    onChange?: (event: CustomEvent<any>) => void;
    onNameInputEvent?: (event: CustomEvent<any>) => void;
    onSave?: (event: CustomEvent<any>) => void;
    /**
     * The color value, such as "red", #CCDDEE, or rgba(220,140,40,.5)
     */
    value?: string;
  }
  interface GxgColumn {
    /**
     * The column width value
     */
    width?: WidthType;
  }
  interface GxgColumns {
    /**
     * The vertical alignment
     */
    alignY?: AlignY;
    /**
     * The collapse breakpoint
     */
    collapseBellow?: CollapseBellow;
    /**
     * The spacing between columns
     */
    space?: Space;
  }
  interface GxgCombo {
    items?: Array<Object>;
  }
  interface GxgContextualMenu {
    /**
     * The presence of this attribute makes the menu visible
     */
    visible?: boolean;
  }
  interface GxgContextualMenuItem {
    /**
     * Optional icon
     */
    icon?: string;
  }
  interface GxgContextualMenuSubmenu {}
  interface GxgDatePicker {
    /**
     * The presence of this attribute makes the date-picker always visible
     */
    alwaysShow?: boolean;
    /**
     * initial date
     */
    defaultDate?: string;
    /**
     * The datepicker label
     */
    label?: string;
    /**
     * The max. date
     */
    maxDate?: string;
    /**
     * The max. width
     */
    maxWidth?: string;
    /**
     * The min. date
     */
    minDate?: string;
    /**
     * no weekends available
     */
    noWeekends?: boolean;
  }
  interface GxgDemo {
    initiateDemo?: boolean;
    layerZIndex?: number;
    modalMessage?: string;
  }
  interface GxgDragBox {
    /**
     * The presence of this attribute makes this box active
     */
    active?: boolean;
    /**
     * The presence of this attribute adds a "delete" button that, when pressed, triggers the "deleted" event
     */
    deletable?: boolean;
    /**
     * This event is for internal use
     */
    onClicked?: (event: CustomEvent<any>) => void;
    /**
     * This event fires when the "delete" button is pressed
     */
    onDeleted?: (event: CustomEvent<any>) => void;
    /**
     * The padding (internal spacing) of the drag-box (Set it on the drag-container to apply the same padding to all of the gxg-drag-box items)
     */
    padding?: Padding;
    /**
     * The title
     */
    title?: string;
  }
  interface GxgDragContainer {
    /**
     * The presence of this attribute adds a "delete" button to each gxg-drag-box. When pressed, the "deleted" event is emmited.
     */
    deletable?: boolean;
    /**
     * The max-width of the box container
     */
    maxWidth?: string;
    onItemDragEnter?: (event: CustomEvent<any>) => void;
    onItemDragLeave?: (event: CustomEvent<any>) => void;
    onItemDragOver?: (event: CustomEvent<any>) => void;
    onItemDragStart?: (event: CustomEvent<any>) => void;
    onItemDrop?: (event: CustomEvent<any>) => void;
    /**
     * The padding (internal spacing) of the gxg-drag-boxes
     */
    padding?: Padding;
  }
  interface GxgFilter {
    /**
     * The left position of the filter, relative to the closest parent with relative position. (optional)
     */
    left?: any;
    /**
     * The top position of the filter, relative to the closest parent with relative position. (optional)
     */
    top?: any;
  }
  interface GxgFilterItem {
    /**
     * Any icon that belongs to Gemini icon library: https://gx-gemini.netlify.app/?path=/story/icons
     */
    icon?: string;
    /**
     * The item-id (required if you want to know that this item was clicked)
     */
    itemId?: any;
    /**
     * This event is fired when the user clicks on an item. event.detail carries the item id, type, and text.
     */
    onItemClickedEvent?: (event: CustomEvent<any>) => void;
    /**
     * The type (optional)
     */
    type?: any;
  }
  interface GxgFormCheckbox {
    /**
     * The checkbox id
     */
    checkboxId?: string;
    /**
     * The presence of this attribute makes the checkbox checked by default
     */
    checked?: boolean;
    /**
     * The presence of this attribute disables the checkbox
     */
    disabled?: boolean;
    /**
     * The presence of this attribute makes the checkbox indeterminate
     */
    indeterminate?: boolean;
    /**
     * The checkbox label
     */
    label?: string;
    /**
     * The checkbox name
     */
    name?: string;
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * The checkbox value
     */
    value?: string;
  }
  interface GxgFormMessage {
    /**
     * The type of message
     */
    type?: Message;
  }
  interface GxgFormRadio {
    /**
     * The radio id
     */
    RadioId?: string;
    /**
     * The presence of this attribute makes the radio selected by default
     */
    checked?: boolean;
    /**
     * The presence of this attribute disables the radio
     */
    disabled?: boolean;
    /**
     * Styles the radio-button with error attributes
     */
    error?: boolean;
    /**
     * The radio label
     */
    label?: string;
    /**
     * The radio name (should be the same for every radio of the same radio-group)
     */
    name?: string;
    /**
     * Returns an object with the radio value, and radio id
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * (This event is for internal use)
     */
    onChangeInternal?: (event: CustomEvent<any>) => void;
    /**
     * (This event is for internal use)
     */
    onKeyPressed?: (event: CustomEvent<any>) => void;
    /**
     * The radio value
     */
    value?: string;
  }
  interface GxgFormRadioGroup {
    /**
     * The radio group label
     */
    label?: string;
    /**
     * Make the radio-buttons required
     */
    required?: boolean;
    /**
     * The required message if this input is required and no value is provided (optional). If this is not provided, the default browser required message will show up
     */
    requiredMessage?: string;
  }
  interface GxgFormText {
    /**
     * The presence of this attribute displays a clear (cross) button-icon on the right side
     */
    clearButton?: boolean;
    /**
     * The presence of this attribute makes the input disabled
     */
    disabled?: boolean;
    /**
     * The presence of this attribute gives the component error styles
     */
    error?: boolean;
    /**
     * The input icon (optional)
     */
    icon?: any;
    /**
     * The input icon side
     */
    iconPosition?: IconPosition;
    /**
     * The input label
     */
    label?: string;
    /**
     * The input label
     */
    labelPosition?: LabelPosition;
    /**
     * The input max. width
     */
    maxWidth?: string;
    /**
     * The presence of this attribute hides the border, and sets the background to transparent when the element has no focus
     */
    minimal?: boolean;
    /**
     * Returns the input value
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * The clear button was clicked
     */
    onClearButtonClicked?: (event: CustomEvent<any>) => void;
    /**
     * Returns the input value
     */
    onInput?: (event: CustomEvent<any>) => void;
    /**
     * The presence of this attribute sets the text color to white. Usefull when "minimal" attribute is applied and the background behind the input is dark
     */
    overDarkBackground?: boolean;
    /**
     * The presence of this attribute sets the input type as password
     */
    password?: boolean;
    /**
     * The input placeholder
     */
    placeholder?: string;
    /**
     * The presence of this attribute makes this input required
     */
    required?: boolean;
    /**
     * The required message if this input is required and no value is provided (optional). If this is not provided, the default browser required message will show up
     */
    requiredMessage?: string;
    /**
     * The text style
     */
    textStyle?: Style;
    /**
     * The input value
     */
    value?: string;
    /**
     * The presence of this attribute gives the component warning styles
     */
    warning?: boolean;
  }
  interface GxgFormTextarea {
    /**
     * The presence of this attribute makes the textarea disabled
     */
    disabled?: boolean;
    /**
     * The presence of this attribute gives the component error styles
     */
    error?: boolean;
    /**
     * The textarea label
     */
    label?: string;
    /**
     * The max-width
     */
    maxWidth?: string;
    /**
     * Returns the textarea value
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * Returns the textarea value
     */
    onInput?: (event: CustomEvent<any>) => void;
    /**
     * The textarea placeholder
     */
    placeholder?: string;
    /**
     * The presence of this attribute makes the textarea required
     */
    required?: boolean;
    /**
     * The required message if this input is required and no value is provided (optional). If this is not provided, the default browser required message will show up
     */
    requiredMessage?: string;
    /**
     * The number of rows
     */
    rows?: number;
    /**
     * The textarea value
     */
    value?: string;
    /**
     * The presence of this attribute gives the component warning styles
     */
    warning?: boolean;
  }
  interface GxgIcon {
    /**
     * The color of the icon.
     */
    color?: Color;
    /**
     * The size of the icon. Possible values: regular, small.
     */
    size?: Size;
    /**
     * The type of icon.
     */
    type?: any;
  }
  interface GxgLoader {
    /**
     * The prescence of this attribute shows the loader
     */
    show?: boolean;
    /**
     * The text you want to show under the loader (optional)
     */
    text?: string;
    /**
     * The z-index positive value you want for the loader when visible (default: 100)
     */
    visibleZIndex?: string;
  }
  interface GxgMenu {
    /**
     * The menu title
     */
    menuTitle?: string;
    /**
     * Provide this attribute if you are using this menu on the tabs component
     */
    tabs?: boolean;
  }
  interface GxgMenuItem {
    active?: boolean;
    icon?: string;
    label?: string;
    onMenuItemActive?: (event: CustomEvent<any>) => void;
  }
  interface GxgModal {
    /**
     * The footer justify content type
     */
    footerJustifyContent?: string;
    /**
     * The modal title
     */
    modalTitle?: string;
    padding?: padding;
    /**
     * The presence of this attribute removes the sound that plays when the modal appears
     */
    silent?: boolean;
    /**
     * Wether the modal is visible or not
     */
    visible?: boolean;
    /**
     * The modal width
     */
    width?: string;
    /**
     * The z-index value of the modal
     */
    zIndex?: string;
  }
  interface GxgMoreInfo {
    /**
     * The label
     */
    label?: string;
    /**
     * (Optional) The "more-info" label. This property goes along with "url" attribute
     */
    moreInfoLabel?: string;
    /**
     * the tooltip position
     */
    position?: position;
    /**
     * The url target
     */
    target?: target;
    /**
     * (Optional) The "more-info" url.
     */
    url?: string;
  }
  interface GxgOption {
    onOptionIsSelected?: (event: CustomEvent<any>) => void;
    /**
     * The presence of this attribute makes the option selected by default
     */
    selected?: boolean;
    /**
     * The value
     */
    value?: string;
  }
  interface GxgPill {
    /**
     * The presence of this attribute disables the pillgit a
     */
    disabled?: boolean;
    /**
     * The presence of this attribute sets auto-height. Usefull when the text overflows.
     */
    heightAuto?: boolean;
    /**
     * The icon
     */
    icon?: string;
    /**
     * The type of pill
     */
    type?: PillType;
  }
  interface GxgProgressBar {
    /**
     * The state of the progress-bar, whether it is disabled or not.
     */
    disabled?: boolean;
    /**
     * The progress-bar label
     */
    label?: string;
    /**
     * The max. width
     */
    maxWidth?: string;
    /**
     * The presence of this attribute removes the sound that plays when the progress-bar finishes
     */
    silent?: boolean;
    /**
     * The progress value (percentage)
     */
    value?: number;
  }
  interface GxgScroll {
    /**
     * Max height
     */
    maxHeight?: string;
  }
  interface GxgSelect {
    /**
     * The presence of this attribute disables the component
     */
    disabled?: boolean;
    /**
     * The presence of this attribute stylizes the component with error attributes
     */
    error?: boolean;
    /**
     * The select label
     */
    label?: string;
    /**
     * The input label
     */
    labelPosition?: LabelPosition;
    /**
     * The select max. width
     */
    maxWidth?: string;
    /**
     * The presence of this attribute hides the border, and sets the background to transparent when the element has no focus
     */
    minimal?: boolean;
    /**
     * Returns the value of the selected option
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * The presence of this attribute makes this input required
     */
    required?: boolean;
    /**
     * The maximum number of visible options
     */
    size?: string;
    /**
     * This holds the value of the selected option
     */
    value?: string;
    /**
     * The presence of this attribute stylizes the component with warning attributes
     */
    warning?: boolean;
  }
  interface GxgSeparator {
    /**
     * The hr top and bottom margin
     */
    margin?: margin;
    /**
     * The hr style
     */
    type?: string;
  }
  interface GxgSlider {
    /**
     * The state of the slider, whether is disabled or not.
     */
    disabled?: boolean;
    /**
     * The label
     */
    label?: string;
    /**
     * The max. value
     */
    max?: number;
    /**
     * The slider max. width
     */
    maxWidth?: string;
    /**
     * The initial value
     */
    value?: number;
  }
  interface GxgSpacerLayout {
    /**
     * Add this attribute to make the spacer-layout full height
     */
    fullHeight?: boolean;
    /**
     * Content justify
     */
    justifyContent?: JustifyContent;
    /**
     * The orientation
     */
    orientation?: Orientation;
    /**
     * The spacing value, taken from the "token-spacing" global values
     */
    space?: Space;
  }
  interface GxgSpacerOne {
    /**
     * The spacing value, taken from the "token-spacing" global values
     */
    space?: string;
  }
  interface GxgSplit {}
  interface GxgSplitter {
    /**
     * The splitter direction test
     */
    direction?: Direction;
    /**
     * The type of knob
     */
    knob?: Knob;
    /**
     * The splitter min. sizes in pixels
     */
    minSize?: string;
    /**
     * This event is fired when the dragging has stopped
     */
    onDragEnded?: (event: CustomEvent<any>) => void;
    /**
     * This event is fired when the gutter is being dragged
     */
    onDragging?: (event: CustomEvent<any>) => void;
    /**
     * The splitter initial sizes, in percentages. The sum should equal 100
     */
    sizes?: string;
  }
  interface GxgStack {
    /**
     * The spacing value
     */
    space?: Space;
  }
  interface GxgStepper {
    /**
     * The state of the stepper, whether is disabled or not.
     */
    disabled?: boolean;
    /**
     * The label
     */
    label?: string;
    /**
     * The label position
     */
    labelPosition?: LabelPosition;
    /**
     * The max. value
     */
    max?: number;
    /**
     * The min. value
     */
    min?: number;
    onStepperInput?: (event: CustomEvent<any>) => void;
    /**
     * The initial vaule
     */
    value?: number;
  }
  interface GxgTab {
    /**
     * The selected tab
     */
    isSelected?: boolean;
    /**
     * The tab id. Should match the "tab" value of the correlative "gxg-tab"
     */
    tab?: string;
  }
  interface GxgTabBar {}
  interface GxgTabButton {
    /**
     * Provide this attribute to make this button disabled
     */
    disabled?: boolean;
    /**
     * (Optional) provide an icon to this button
     */
    icon?: string;
    /**
     * Provide this attribute to make this button selected by default
     */
    isSelected?: boolean;
    onTabActivated?: (event: CustomEvent<any>) => void;
    /**
     * The tab id. Must be unique, and match the "tab" value of the correlative "gxg-tab" element
     */
    tab?: string;
    /**
     * The button label
     */
    tabLabel?: string;
  }
  interface GxgTabs {
    height?: Height;
    position?: TabsPosition;
  }
  interface GxgTemplate {
    name?: string;
  }
  interface GxgTest {}
  interface GxgText {
    /**
     * The href (for "link" or "link-gray" types
     */
    href?: string;
    /**
     * The target (for "link" or "link-gray" types
     */
    target?: TargetType;
    /**
     * Title type
     */
    type?: TextType;
  }
  interface GxgTitle {
    /**
     * Title type
     */
    type?: TitleType;
  }
  interface GxgToggle {
    /**
     * The state of the toggle. Whether is disabled or not.
     */
    disabled?: boolean;
    /**
     * The label
     */
    label?: string;
    /**
     * If the toggle is active or not
     */
    on?: boolean;
    /**
     * This event is triggered when the toggle is switched. 'event.detail' will display true when the toggle is on, or false when the toggle is off.
     */
    onToggleSwitched?: (event: CustomEvent<any>) => void;
  }
  interface GxgToolbar {
    /**
     * The toggle arrow position
     */
    position?: position;
    /**
     * The toolbar title
     */
    subtitle?: string;
    /**
     * The toolbar subtitle
     */
    toolbarTitle?: string;
  }
  interface GxgToolbarItem {
    /**
     * The state of the toolbar-item, whether it is disabled or not
     */
    disabled?: boolean;
    /**
     * The toolbar-item icon
     */
    icon?: string;
    /**
     * The toolbar-item subtitle
     */
    subtitle?: string;
    /**
     * The toolbar-item title
     */
    toolbarItemTitle?: string;
  }
  interface GxgTooltip {
    /**
     * The label
     */
    label?: string;
    /**
     * This presence of this property removes the border under the text
     */
    noBorder?: boolean;
    /**
     * the tooltip position
     */
    position?: position;
  }
  interface GxgTree {
    /**
     * Set this attribute if you want all this tree tree-items to have a checkbox
     */
    checkbox?: boolean;
    /**
     * Set this attribute if you want all this tree tree-items to have the checkbox checked
     */
    checked?: boolean;
    /**
     * Set this attribute if you want all the childen item's checkboxes to be checked when the parent item checkbox is checked, or to be unchecked when the parent item checkbox is unckecked.
     */
    toggleCheckboxes?: boolean;
  }
  interface GxgTreeGridDivs {
    columns?: Array<object>;
    displayChildren?: DisplayChildren;
    editCell?: { rowId: number; columnName: string };
    onAddRow?: (event: CustomEvent<any>) => void;
    onRemoveRow?: (event: CustomEvent<any>) => void;
    onSelectedRows?: (event: CustomEvent<any>) => void;
    rows?: Array<object>;
    selectedRowsIds?: number;
    width?: string;
  }
  interface GxgTreeItem {
    /**
     * Set this attribute if you want the gxg-treeitem to display a checkbox
     */
    checkbox?: boolean;
    /**
     * Set this attribute if you want the gxg-treeitem checkbox to be checked by default
     */
    checked?: boolean;
    disabled?: boolean;
    /**
     * Set this attribute if this tree-item has a resource to be downloaded;
     */
    download?: boolean;
    /**
     * Set this attribute when you have downloaded the resource
     */
    downloaded?: boolean;
    /**
     * Set this attribute when you are downloading a resource
     */
    downloading?: boolean;
    firstTreeItem?: boolean;
    hasChildTree?: boolean;
    indeterminate?: boolean;
    /**
     * The presence of this attribute displays a +/- icon to toggle/untoggle the tree
     */
    isLeaf?: boolean;
    /**
     * Set the left side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
     */
    leftIcon?: string;
    onCheckboxClickedEvent?: (event: CustomEvent<any>) => void;
    onLiItemClicked?: (event: CustomEvent<any>) => void;
    onToggleIconClicked?: (event: CustomEvent<any>) => void;
    /**
     * If this tree-item has a nested tree, set this attribute to make the tree open by default
     */
    opened?: boolean;
    /**
     * Set thhe right side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
     */
    rightIcon?: string;
    /**
     * The presence of this attribute sets the tree-item as selected
     */
    selected?: boolean;
  }
  interface IntrinsicElements {
    "gxg-accordion": GxgAccordion;
    "gxg-accordion-item": GxgAccordionItem;
    "gxg-alert": GxgAlert;
    "gxg-box": GxgBox;
    "gxg-breadcrumb": GxgBreadcrumb;
    "gxg-breadcrumbs": GxgBreadcrumbs;
    "gxg-button": GxgButton;
    "gxg-button-group": GxgButtonGroup;
    "gxg-card": GxgCard;
    "gxg-color-picker": GxgColorPicker;
    "gxg-column": GxgColumn;
    "gxg-columns": GxgColumns;
    "gxg-combo": GxgCombo;
    "gxg-contextual-menu": GxgContextualMenu;
    "gxg-contextual-menu-item": GxgContextualMenuItem;
    "gxg-contextual-menu-submenu": GxgContextualMenuSubmenu;
    "gxg-date-picker": GxgDatePicker;
    "gxg-demo": GxgDemo;
    "gxg-drag-box": GxgDragBox;
    "gxg-drag-container": GxgDragContainer;
    "gxg-filter": GxgFilter;
    "gxg-filter-item": GxgFilterItem;
    "gxg-form-checkbox": GxgFormCheckbox;
    "gxg-form-message": GxgFormMessage;
    "gxg-form-radio": GxgFormRadio;
    "gxg-form-radio-group": GxgFormRadioGroup;
    "gxg-form-text": GxgFormText;
    "gxg-form-textarea": GxgFormTextarea;
    "gxg-icon": GxgIcon;
    "gxg-loader": GxgLoader;
    "gxg-menu": GxgMenu;
    "gxg-menu-item": GxgMenuItem;
    "gxg-modal": GxgModal;
    "gxg-more-info": GxgMoreInfo;
    "gxg-option": GxgOption;
    "gxg-pill": GxgPill;
    "gxg-progress-bar": GxgProgressBar;
    "gxg-scroll": GxgScroll;
    "gxg-select": GxgSelect;
    "gxg-separator": GxgSeparator;
    "gxg-slider": GxgSlider;
    "gxg-spacer-layout": GxgSpacerLayout;
    "gxg-spacer-one": GxgSpacerOne;
    "gxg-split": GxgSplit;
    "gxg-splitter": GxgSplitter;
    "gxg-stack": GxgStack;
    "gxg-stepper": GxgStepper;
    "gxg-tab": GxgTab;
    "gxg-tab-bar": GxgTabBar;
    "gxg-tab-button": GxgTabButton;
    "gxg-tabs": GxgTabs;
    "gxg-template": GxgTemplate;
    "gxg-test": GxgTest;
    "gxg-text": GxgText;
    "gxg-title": GxgTitle;
    "gxg-toggle": GxgToggle;
    "gxg-toolbar": GxgToolbar;
    "gxg-toolbar-item": GxgToolbarItem;
    "gxg-tooltip": GxgTooltip;
    "gxg-tree": GxgTree;
    "gxg-tree-grid-divs": GxgTreeGridDivs;
    "gxg-tree-item": GxgTreeItem;
  }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      "gxg-accordion": LocalJSX.GxgAccordion &
        JSXBase.HTMLAttributes<HTMLGxgAccordionElement>;
      "gxg-accordion-item": LocalJSX.GxgAccordionItem &
        JSXBase.HTMLAttributes<HTMLGxgAccordionItemElement>;
      "gxg-alert": LocalJSX.GxgAlert &
        JSXBase.HTMLAttributes<HTMLGxgAlertElement>;
      "gxg-box": LocalJSX.GxgBox & JSXBase.HTMLAttributes<HTMLGxgBoxElement>;
      "gxg-breadcrumb": LocalJSX.GxgBreadcrumb &
        JSXBase.HTMLAttributes<HTMLGxgBreadcrumbElement>;
      "gxg-breadcrumbs": LocalJSX.GxgBreadcrumbs &
        JSXBase.HTMLAttributes<HTMLGxgBreadcrumbsElement>;
      "gxg-button": LocalJSX.GxgButton &
        JSXBase.HTMLAttributes<HTMLGxgButtonElement>;
      "gxg-button-group": LocalJSX.GxgButtonGroup &
        JSXBase.HTMLAttributes<HTMLGxgButtonGroupElement>;
      "gxg-card": LocalJSX.GxgCard & JSXBase.HTMLAttributes<HTMLGxgCardElement>;
      "gxg-color-picker": LocalJSX.GxgColorPicker &
        JSXBase.HTMLAttributes<HTMLGxgColorPickerElement>;
      "gxg-column": LocalJSX.GxgColumn &
        JSXBase.HTMLAttributes<HTMLGxgColumnElement>;
      "gxg-columns": LocalJSX.GxgColumns &
        JSXBase.HTMLAttributes<HTMLGxgColumnsElement>;
      "gxg-combo": LocalJSX.GxgCombo &
        JSXBase.HTMLAttributes<HTMLGxgComboElement>;
      "gxg-contextual-menu": LocalJSX.GxgContextualMenu &
        JSXBase.HTMLAttributes<HTMLGxgContextualMenuElement>;
      "gxg-contextual-menu-item": LocalJSX.GxgContextualMenuItem &
        JSXBase.HTMLAttributes<HTMLGxgContextualMenuItemElement>;
      "gxg-contextual-menu-submenu": LocalJSX.GxgContextualMenuSubmenu &
        JSXBase.HTMLAttributes<HTMLGxgContextualMenuSubmenuElement>;
      "gxg-date-picker": LocalJSX.GxgDatePicker &
        JSXBase.HTMLAttributes<HTMLGxgDatePickerElement>;
      "gxg-demo": LocalJSX.GxgDemo & JSXBase.HTMLAttributes<HTMLGxgDemoElement>;
      "gxg-drag-box": LocalJSX.GxgDragBox &
        JSXBase.HTMLAttributes<HTMLGxgDragBoxElement>;
      "gxg-drag-container": LocalJSX.GxgDragContainer &
        JSXBase.HTMLAttributes<HTMLGxgDragContainerElement>;
      "gxg-filter": LocalJSX.GxgFilter &
        JSXBase.HTMLAttributes<HTMLGxgFilterElement>;
      "gxg-filter-item": LocalJSX.GxgFilterItem &
        JSXBase.HTMLAttributes<HTMLGxgFilterItemElement>;
      "gxg-form-checkbox": LocalJSX.GxgFormCheckbox &
        JSXBase.HTMLAttributes<HTMLGxgFormCheckboxElement>;
      "gxg-form-message": LocalJSX.GxgFormMessage &
        JSXBase.HTMLAttributes<HTMLGxgFormMessageElement>;
      "gxg-form-radio": LocalJSX.GxgFormRadio &
        JSXBase.HTMLAttributes<HTMLGxgFormRadioElement>;
      "gxg-form-radio-group": LocalJSX.GxgFormRadioGroup &
        JSXBase.HTMLAttributes<HTMLGxgFormRadioGroupElement>;
      "gxg-form-text": LocalJSX.GxgFormText &
        JSXBase.HTMLAttributes<HTMLGxgFormTextElement>;
      "gxg-form-textarea": LocalJSX.GxgFormTextarea &
        JSXBase.HTMLAttributes<HTMLGxgFormTextareaElement>;
      "gxg-icon": LocalJSX.GxgIcon & JSXBase.HTMLAttributes<HTMLGxgIconElement>;
      "gxg-loader": LocalJSX.GxgLoader &
        JSXBase.HTMLAttributes<HTMLGxgLoaderElement>;
      "gxg-menu": LocalJSX.GxgMenu & JSXBase.HTMLAttributes<HTMLGxgMenuElement>;
      "gxg-menu-item": LocalJSX.GxgMenuItem &
        JSXBase.HTMLAttributes<HTMLGxgMenuItemElement>;
      "gxg-modal": LocalJSX.GxgModal &
        JSXBase.HTMLAttributes<HTMLGxgModalElement>;
      "gxg-more-info": LocalJSX.GxgMoreInfo &
        JSXBase.HTMLAttributes<HTMLGxgMoreInfoElement>;
      "gxg-option": LocalJSX.GxgOption &
        JSXBase.HTMLAttributes<HTMLGxgOptionElement>;
      "gxg-pill": LocalJSX.GxgPill & JSXBase.HTMLAttributes<HTMLGxgPillElement>;
      "gxg-progress-bar": LocalJSX.GxgProgressBar &
        JSXBase.HTMLAttributes<HTMLGxgProgressBarElement>;
      "gxg-scroll": LocalJSX.GxgScroll &
        JSXBase.HTMLAttributes<HTMLGxgScrollElement>;
      "gxg-select": LocalJSX.GxgSelect &
        JSXBase.HTMLAttributes<HTMLGxgSelectElement>;
      "gxg-separator": LocalJSX.GxgSeparator &
        JSXBase.HTMLAttributes<HTMLGxgSeparatorElement>;
      "gxg-slider": LocalJSX.GxgSlider &
        JSXBase.HTMLAttributes<HTMLGxgSliderElement>;
      "gxg-spacer-layout": LocalJSX.GxgSpacerLayout &
        JSXBase.HTMLAttributes<HTMLGxgSpacerLayoutElement>;
      "gxg-spacer-one": LocalJSX.GxgSpacerOne &
        JSXBase.HTMLAttributes<HTMLGxgSpacerOneElement>;
      "gxg-split": LocalJSX.GxgSplit &
        JSXBase.HTMLAttributes<HTMLGxgSplitElement>;
      "gxg-splitter": LocalJSX.GxgSplitter &
        JSXBase.HTMLAttributes<HTMLGxgSplitterElement>;
      "gxg-stack": LocalJSX.GxgStack &
        JSXBase.HTMLAttributes<HTMLGxgStackElement>;
      "gxg-stepper": LocalJSX.GxgStepper &
        JSXBase.HTMLAttributes<HTMLGxgStepperElement>;
      "gxg-tab": LocalJSX.GxgTab & JSXBase.HTMLAttributes<HTMLGxgTabElement>;
      "gxg-tab-bar": LocalJSX.GxgTabBar &
        JSXBase.HTMLAttributes<HTMLGxgTabBarElement>;
      "gxg-tab-button": LocalJSX.GxgTabButton &
        JSXBase.HTMLAttributes<HTMLGxgTabButtonElement>;
      "gxg-tabs": LocalJSX.GxgTabs & JSXBase.HTMLAttributes<HTMLGxgTabsElement>;
      "gxg-template": LocalJSX.GxgTemplate &
        JSXBase.HTMLAttributes<HTMLGxgTemplateElement>;
      "gxg-test": LocalJSX.GxgTest & JSXBase.HTMLAttributes<HTMLGxgTestElement>;
      "gxg-text": LocalJSX.GxgText & JSXBase.HTMLAttributes<HTMLGxgTextElement>;
      "gxg-title": LocalJSX.GxgTitle &
        JSXBase.HTMLAttributes<HTMLGxgTitleElement>;
      "gxg-toggle": LocalJSX.GxgToggle &
        JSXBase.HTMLAttributes<HTMLGxgToggleElement>;
      "gxg-toolbar": LocalJSX.GxgToolbar &
        JSXBase.HTMLAttributes<HTMLGxgToolbarElement>;
      "gxg-toolbar-item": LocalJSX.GxgToolbarItem &
        JSXBase.HTMLAttributes<HTMLGxgToolbarItemElement>;
      "gxg-tooltip": LocalJSX.GxgTooltip &
        JSXBase.HTMLAttributes<HTMLGxgTooltipElement>;
      "gxg-tree": LocalJSX.GxgTree & JSXBase.HTMLAttributes<HTMLGxgTreeElement>;
      "gxg-tree-grid-divs": LocalJSX.GxgTreeGridDivs &
        JSXBase.HTMLAttributes<HTMLGxgTreeGridDivsElement>;
      "gxg-tree-item": LocalJSX.GxgTreeItem &
        JSXBase.HTMLAttributes<HTMLGxgTreeItemElement>;
    }
  }
}

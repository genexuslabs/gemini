/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { padding } from "./components/accordion-item/accordion-item";
import { mode } from "./components/accordion/accordion";
import { mode as mode1 } from "./components/accordion/accordion";
import {
  padding as padding1,
  status
} from "./components/accordion-item/accordion-item";
import {
  ActiveTime,
  AlertPosition,
  AlertType,
  Spacing
} from "./components/alert/alert";
import { background, border, padding as padding2 } from "./components/box/box";
import { IconType } from "./components/icon/icon";
import { ButtonType } from "./components/button/button";
import { TitleAlignment } from "./components/button-group/button-group";
import {
  background as background1,
  elevation,
  padding as padding3
} from "./components/card/card";
import { padding as padding4, WidthType } from "./components/column/column";
import { AlignY, CollapseBellow, Space } from "./components/columns/columns";
import { padding as padding5 } from "./components/column/column";
import { Padding } from "./components/drag-box/drag-box";
import { Padding as Padding1 } from "./components/drag-box/drag-box";
import { Message } from "./components/form-message/form-message";
import { IconPosition } from "./components/form-text/form-text";
import { Color, IconType as IconType1, Size } from "./components/icon/icon";
import { padding as padding6 } from "./components/modal/modal";
import { position } from "./components/more-info/more-info";
import { PillIconType, PillType } from "./components/pill/pill";
import { margin } from "./components/separator/separator";
import { Space as Space1 } from "./components/stack/stack";
import { TargetType, TextType } from "./components/text/text";
import { TitleType } from "./components/title/title";
import { Size as Size1 } from "./components/toggle/toggle";
import { position as position1 } from "./components/tooltip/tooltip";
export namespace Components {
  interface GxgAccordion {
    /**
     * The presence of this attribute makes all of the accordion-items disabled and not focusable
     */
    disabled: boolean;
    /**
     * The accordion max-width
     */
    maxWidth: string;
    /**
     * The accordion flavor
     */
    mode: mode;
    padding: padding;
    /**
     * If this attribute is present, only one accordion-item can be open at the same time
     */
    singleItemOpen: boolean;
  }
  interface GxgAccordionItem {
    /**
     * The presence of this attribute makes the accordion-item disabled and not focusable
     */
    disabled: boolean;
    /**
     * The presence of this attribute makes the accordion title editable
     */
    editableTitle: boolean;
    /**
     * The accordion id
     */
    itemId: string;
    /**
     * The accordion title
     */
    itemTitle: string;
    /**
     * The accordion flavor (No need to set this attribute on each of the the accordion-item's, only once at gxg-accordion)
     */
    mode: mode;
    padding: padding;
    /**
     * Set the status to "open" if you want the accordion-item open by default
     */
    status: status;
  }
  interface GxgAlert {
    /**
     * Wether the alert is active (visible) or hidden
     */
    active: boolean;
    /**
     * The amount of time the alert is visible before hidding under the document
     */
    activeTime: ActiveTime;
    /**
     * The alert title (optional)
     */
    alertTitle: string;
    /**
     * The spacing between the alert and the bottom side of the document
     */
    bottom: Spacing;
    /**
     * The presence of this attribute makes the component full-width
     */
    fullWidth: boolean;
    /**
     * The spacing between the alert, and the left or right side of the document
     */
    leftRight: Spacing;
    /**
     * The alert position on the X axis
     */
    position: AlertPosition;
    /**
     * The alert flavor
     */
    type: AlertType;
    /**
     * The alert width
     */
    width: string;
  }
  interface GxgBox {
    /**
     * The background color
     */
    background: background;
    /**
     * The border type
     */
    border: border;
    /**
     * The component max. width
     */
    maxWidth: string;
    /**
     * The component min. height
     */
    minHeight: string;
    padding: padding;
  }
  interface GxgButton {
    /**
     * The prescence of this attribute makes the icon always black
     */
    alwaysBlack: boolean;
    /**
     * The state of the button, whether it is disabled or not
     */
    disabled: boolean;
    /**
     * The presence of this attribute makes the component full-width
     */
    fullWidth: boolean;
    /**
     * The button icon
     */
    icon: IconType;
    /**
     * The kind of button
     */
    type: ButtonType;
  }
  interface GxgButtonGroup {
    /**
     * The button-group title
     */
    buttonGroupTitle: string;
    /**
     * The id of the button that you would like to be active by default
     */
    defaultSelectedBtnId: string;
    /**
     * Wether the button group is disabled or not
     */
    disabled: boolean;
    /**
     * The presence of this attribute makes the component full-width
     */
    fullWidth: boolean;
    /**
     * The presence of this attribute makes the button group outlined
     */
    outlined: boolean;
    /**
     * The button group title alignment
     */
    titleAlignment: TitleAlignment;
  }
  interface GxgCard {
    /**
     * The background color
     */
    background: background;
    /**
     * The card box-shadow
     */
    elevation: elevation;
    /**
     * The component max. width
     */
    maxWidth: string;
    /**
     * The component min. height
     */
    minHeight: string;
    /**
     * The card padding (internal spacing)
     */
    padding: padding;
  }
  interface GxgColorPicker {
    /**
     * The label of the color picker (optional)
     */
    label: string;
    /**
     * The color value, such as "red", #CCDDEE, or rgba(220,140,40,.5)
     */
    value: string;
  }
  interface GxgColumn {
    /**
     * The column padding (internal spacing)
     */
    padding: padding;
    /**
     * The column width value
     */
    width: WidthType;
  }
  interface GxgColumns {
    /**
     * The vertical alignment
     */
    alignY: AlignY;
    /**
     * The collapse breakpoint
     */
    collapseBellow: CollapseBellow;
    padding: padding;
    /**
     * The spacing between columns
     */
    space: Space;
  }
  interface GxgDatePicker {
    /**
     * The presence of this attribute makes the date-picker always visible
     */
    alwaysShow: boolean;
    /**
     * initial date
     */
    defaultDate: string;
    /**
     * The datepicker label
     */
    label: string;
    /**
     * The max. date
     */
    maxDate: string;
    /**
     * The max. width
     */
    maxWidth: string;
    /**
     * The min. date
     */
    minDate: string;
    /**
     * no weekends available
     */
    noWeekends: boolean;
  }
  interface GxgDragBox {
    /**
     * The presence of this attribute makes this box active
     */
    active: boolean;
    /**
     * The presence of this attribute adds a "delete" button that you can press to delete the box
     */
    deletable: boolean;
    /**
     * The padding (internal spacing)
     */
    padding: Padding;
    /**
     * The title
     */
    title: string;
  }
  interface GxgDragContainer {
    /**
     * The presence of this attribute adds a "delete" button to each child, that you can press to delete the item
     */
    deletable: boolean;
    /**
     * The max-width of the box container
     */
    maxWidth: string;
    padding: Padding;
  }
  interface GxgFormCheckbox {
    /**
     * The checkbox id
     */
    checkboxId: string;
    /**
     * The presence of this attribute makes the checkbox checked by default
     */
    checked: boolean;
    /**
     * The presence of this attribute disables the checkbox
     */
    disabled: boolean;
    /**
     * The checkbox label
     */
    label: string;
    /**
     * The checkbox name
     */
    name: string;
    /**
     * The checkbox value
     */
    value: string;
  }
  interface GxgFormMessage {
    /**
     * The type of message
     */
    type: Message;
  }
  interface GxgFormRadio {
    /**
     * The radio id
     */
    RadioId: string;
    /**
     * The presence of this attribute makes the radio selected by default
     */
    checked: boolean;
    /**
     * The presence of this attribute disables the radio
     */
    disabled: boolean;
    /**
     * The radio label
     */
    label: string;
    /**
     * The radio name (should be the same for every radio of the same radio-group)
     */
    name: string;
    /**
     * Make the radio-button required
     */
    required: boolean;
    /**
     * The radio value
     */
    value: string;
  }
  interface GxgFormRadioGroup {
    /**
     * The radio group label
     */
    label: string;
    /**
     * Make the radio-buttons required
     */
    required: boolean;
    /**
     * The required message if this input is required and no value is provided (optional). If this is not provided, the default browser required message will show up
     */
    requiredMessage: string;
  }
  interface GxgFormText {
    /**
     * The presence of this attribute displays a clear (cross) button-icon on the right side
     */
    clearButton: boolean;
    /**
     * The presence of this attribute makes the input disabled
     */
    disabled: boolean;
    /**
     * The presence of this attribute gives the component error styles
     */
    error: boolean;
    /**
     * The input icon (optional)
     */
    icon: IconType;
    /**
     * The input icon side
     */
    iconPosition: IconPosition;
    /**
     * The input label
     */
    label: string;
    /**
     * The input max. width
     */
    maxWidth: string;
    /**
     * The presence of this attribute hides the border, and sets the background to transparent when the element has no focus
     */
    minimal: boolean;
    /**
     * The input placeholder
     */
    placeholder: string;
    /**
     * The presence of this attribute makes this input required
     */
    required: boolean;
    /**
     * The required message if this input is required and no value is provided (optional). If this is not provided, the default browser required message will show up
     */
    requiredMessage: string;
    /**
     * The input value
     */
    value: string;
    /**
     * The presence of this attribute gives the component warning styles
     */
    warning: boolean;
  }
  interface GxgFormTextarea {
    /**
     * The presence of this attribute makes the textarea disabled
     */
    disabled: boolean;
    /**
     * The presence of this attribute gives the component error styles
     */
    error: boolean;
    /**
     * The textarea label
     */
    label: string;
    /**
     * The max-width
     */
    maxWidth: string;
    /**
     * The textarea placeholder
     */
    placeholder: string;
    /**
     * The presence of this attribute makes the textarea required
     */
    required: boolean;
    /**
     * The required message if this input is required and no value is provided (optional). If this is not provided, the default browser required message will show up
     */
    requiredMessage: string;
    /**
     * The number of rows
     */
    rows: number;
    /**
     * The textarea value
     */
    value: string;
    /**
     * The presence of this attribute gives the component warning styles
     */
    warning: boolean;
  }
  interface GxgIcon {
    /**
     * The color of the icon.
     */
    color: Color;
    /**
     * If enabled, the icon will be loaded lazily when it's visible in the viewport.
     */
    lazy: boolean;
    /**
     * The size of the icon. Possible values: regular, small.
     */
    size: Size;
    /**
     * The type of icon. Possible values: each of the icons in /assets.
     */
    type: IconType;
  }
  interface GxgMenu {
    /**
     * The menu title
     */
    menuTitle: string;
    /**
     * Provide this attribute if you are using this menu on the tabs component
     */
    tabs: boolean;
  }
  interface GxgMenuItem {
    active: boolean;
    icon: IconType;
    label: string;
  }
  interface GxgModal {
    /**
     * The modal title
     */
    modalTitle: string;
    padding: padding;
    /**
     * Wether the modal is visible or not
     */
    visible: boolean;
    /**
     * The modal width
     */
    width: string;
    /**
     * The z-index value of the modal
     */
    zIndex: string;
  }
  interface GxgMoreInfo {
    /**
     * The label
     */
    label: string;
    /**
     * the tooltip position
     */
    position: position;
  }
  interface GxgOption {
    /**
     * The presence of this attribute makes the option selected by default
     */
    selected: boolean;
    /**
     * The value
     */
    value: string;
  }
  interface GxgPill {
    /**
     * The presence of this attribute disables the pillgit a
     */
    disabled: boolean;
    /**
     * The icon
     */
    icon: PillIconType;
    /**
     * The presence of this attribute ads a close button that when clicked, removes the pill
     */
    type: PillType;
  }
  interface GxgProgressBar {
    /**
     * The state of the progress-bar, whether it is disabled or not.
     */
    disabled: boolean;
    /**
     * The progress-bar label
     */
    label: string;
    /**
     * The max. width
     */
    maxWidth: string;
    /**
     * The progress value (percentage)
     */
    value: number;
  }
  interface GxgScroll {
    /**
     * Max height
     */
    maxHeight: string;
  }
  interface GxgSelect {
    /**
     * The presence of this attribute disables the component
     */
    disabled: boolean;
    /**
     * The presence of this attribute stylizes the component with error attributes
     */
    error: boolean;
    /**
     * The select label
     */
    label: string;
    /**
     * The select max. width
     */
    maxWidth: string;
    /**
     * The presence of this attribute hides the border, and sets the background to transparent when the element has no focus
     */
    minimal: boolean;
    /**
     * The presence of this attribute makes this input required
     */
    required: boolean;
    /**
     * The maximum number of visible options
     */
    size: string;
    /**
     * This holds the value of the selected option
     */
    value: string;
    /**
     * The presence of this attribute stylizes the component with warning attributes
     */
    warning: boolean;
  }
  interface GxgSeparator {
    /**
     * The hr top and bottom margin
     */
    margin: margin;
    /**
     * The hr style
     */
    type: string;
  }
  interface GxgSlider {
    /**
     * The state of the slider, whether is disabled or not.
     */
    disabled: boolean;
    /**
     * The label
     */
    label: string;
    /**
     * The max. value
     */
    max: number;
    /**
     * The slider max. width
     */
    maxWidth: string;
    /**
     * The initial value
     */
    value: number;
  }
  interface GxgSpacerLayout {
    /**
     * Add this attribute to make the spacer-layout full height
     */
    fullHeight: boolean;
    /**
     * Content justify
     */
    justifyContent: string;
    /**
     * The orientation
     */
    orientation: string;
    /**
     * The spacing value, taken from the "token-spacing" global values
     */
    space: string;
  }
  interface GxgSpacerOne {
    /**
     * The spacing value, taken from the "token-spacing" global values
     */
    space: string;
  }
  interface GxgStack {
    /**
     * The spacing value
     */
    space: Space;
  }
  interface GxgStepper {
    /**
     * The state of the stepper, whether is disabled or not.
     */
    disabled: boolean;
    /**
     * The label
     */
    label: string;
    /**
     * The max. value
     */
    max: number;
    /**
     * The min. value
     */
    min: number;
    /**
     * The initial vaule
     */
    value: number;
  }
  interface GxgTab {
    isSelected: boolean;
    /**
     * The tab id. Should match the "tab" value of the correlative "gxg-tab"
     */
    tab: string;
  }
  interface GxgTabBar {}
  interface GxgTabButton {
    /**
     * Provide this attribute to make this button disabled
     */
    disabled: boolean;
    /**
     * (Optional) provide an icon to this button
     */
    icon: IconType;
    /**
     * Provide this attribute to make this button selected by default
     */
    isSelected: boolean;
    /**
     * The tab id. Should match the "tab" value of the correlative "gxg-tab" element
     */
    tab: string;
    /**
     * The button label
     */
    tabLabel: string;
  }
  interface GxgTabs {}
  interface GxgText {
    /**
     * The href (for "link" or "link-gray" types
     */
    href: string;
    /**
     * The target (for "link" or "link-gray" types
     */
    target: TargetType;
    /**
     * Title type
     */
    type: TextType;
  }
  interface GxgTitle {
    /**
     * Title type
     */
    type: TitleType;
  }
  interface GxgToggle {
    /**
     * The state of the toggle. Whether is disabled or not.
     */
    disabled: boolean;
    /**
     * The label
     */
    label: string;
    /**
     * If the toggle is active or not
     */
    on: boolean;
    /**
     * The label
     */
    size: Size;
  }
  interface GxgToolbar {
    /**
     * The state of the toggle, wether is disabled or not
     */
    disabled: boolean;
    /**
     * The toggle arrow position
     */
    position: string;
    /**
     * The toolbar title
     */
    subtitle: string;
    /**
     * The toolbar subtitle
     */
    toolbarTitle: string;
  }
  interface GxgToolbarItem {
    /**
     * The state of the toolbar-item, whether it is disabled or not
     */
    disabled: boolean;
    /**
     * The toolbar-item icon
     */
    icon: IconType;
    /**
     * The toolbar-item subtitle
     */
    subtitle: string;
    /**
     * The toolbar-item title
     */
    toolbarItemTitle: string;
  }
  interface GxgTooltip {
    /**
     * The label
     */
    label: string;
    /**
     * This presence of this property removes the border under the text
     */
    noBorder: boolean;
    /**
     * the tooltip position
     */
    position: position;
  }
  interface GxgTree {}
  interface GxgTreeItem {
    /**
     * The state of the tree-item, wether it is disabled or not
     */
    disabled: boolean;
    /**
     * The tree item icon
     */
    icon: IconType;
  }
}
declare global {
  interface HTMLGxgAccordionElement
    extends Components.GxgAccordion,
      HTMLStencilElement {}
  var HTMLGxgAccordionElement: {
    prototype: HTMLGxgAccordionElement;
    new (): HTMLGxgAccordionElement;
  };
  interface HTMLGxgAccordionItemElement
    extends Components.GxgAccordionItem,
      HTMLStencilElement {}
  var HTMLGxgAccordionItemElement: {
    prototype: HTMLGxgAccordionItemElement;
    new (): HTMLGxgAccordionItemElement;
  };
  interface HTMLGxgAlertElement
    extends Components.GxgAlert,
      HTMLStencilElement {}
  var HTMLGxgAlertElement: {
    prototype: HTMLGxgAlertElement;
    new (): HTMLGxgAlertElement;
  };
  interface HTMLGxgBoxElement extends Components.GxgBox, HTMLStencilElement {}
  var HTMLGxgBoxElement: {
    prototype: HTMLGxgBoxElement;
    new (): HTMLGxgBoxElement;
  };
  interface HTMLGxgButtonElement
    extends Components.GxgButton,
      HTMLStencilElement {}
  var HTMLGxgButtonElement: {
    prototype: HTMLGxgButtonElement;
    new (): HTMLGxgButtonElement;
  };
  interface HTMLGxgButtonGroupElement
    extends Components.GxgButtonGroup,
      HTMLStencilElement {}
  var HTMLGxgButtonGroupElement: {
    prototype: HTMLGxgButtonGroupElement;
    new (): HTMLGxgButtonGroupElement;
  };
  interface HTMLGxgCardElement extends Components.GxgCard, HTMLStencilElement {}
  var HTMLGxgCardElement: {
    prototype: HTMLGxgCardElement;
    new (): HTMLGxgCardElement;
  };
  interface HTMLGxgColorPickerElement
    extends Components.GxgColorPicker,
      HTMLStencilElement {}
  var HTMLGxgColorPickerElement: {
    prototype: HTMLGxgColorPickerElement;
    new (): HTMLGxgColorPickerElement;
  };
  interface HTMLGxgColumnElement
    extends Components.GxgColumn,
      HTMLStencilElement {}
  var HTMLGxgColumnElement: {
    prototype: HTMLGxgColumnElement;
    new (): HTMLGxgColumnElement;
  };
  interface HTMLGxgColumnsElement
    extends Components.GxgColumns,
      HTMLStencilElement {}
  var HTMLGxgColumnsElement: {
    prototype: HTMLGxgColumnsElement;
    new (): HTMLGxgColumnsElement;
  };
  interface HTMLGxgDatePickerElement
    extends Components.GxgDatePicker,
      HTMLStencilElement {}
  var HTMLGxgDatePickerElement: {
    prototype: HTMLGxgDatePickerElement;
    new (): HTMLGxgDatePickerElement;
  };
  interface HTMLGxgDragBoxElement
    extends Components.GxgDragBox,
      HTMLStencilElement {}
  var HTMLGxgDragBoxElement: {
    prototype: HTMLGxgDragBoxElement;
    new (): HTMLGxgDragBoxElement;
  };
  interface HTMLGxgDragContainerElement
    extends Components.GxgDragContainer,
      HTMLStencilElement {}
  var HTMLGxgDragContainerElement: {
    prototype: HTMLGxgDragContainerElement;
    new (): HTMLGxgDragContainerElement;
  };
  interface HTMLGxgFormCheckboxElement
    extends Components.GxgFormCheckbox,
      HTMLStencilElement {}
  var HTMLGxgFormCheckboxElement: {
    prototype: HTMLGxgFormCheckboxElement;
    new (): HTMLGxgFormCheckboxElement;
  };
  interface HTMLGxgFormMessageElement
    extends Components.GxgFormMessage,
      HTMLStencilElement {}
  var HTMLGxgFormMessageElement: {
    prototype: HTMLGxgFormMessageElement;
    new (): HTMLGxgFormMessageElement;
  };
  interface HTMLGxgFormRadioElement
    extends Components.GxgFormRadio,
      HTMLStencilElement {}
  var HTMLGxgFormRadioElement: {
    prototype: HTMLGxgFormRadioElement;
    new (): HTMLGxgFormRadioElement;
  };
  interface HTMLGxgFormRadioGroupElement
    extends Components.GxgFormRadioGroup,
      HTMLStencilElement {}
  var HTMLGxgFormRadioGroupElement: {
    prototype: HTMLGxgFormRadioGroupElement;
    new (): HTMLGxgFormRadioGroupElement;
  };
  interface HTMLGxgFormTextElement
    extends Components.GxgFormText,
      HTMLStencilElement {}
  var HTMLGxgFormTextElement: {
    prototype: HTMLGxgFormTextElement;
    new (): HTMLGxgFormTextElement;
  };
  interface HTMLGxgFormTextareaElement
    extends Components.GxgFormTextarea,
      HTMLStencilElement {}
  var HTMLGxgFormTextareaElement: {
    prototype: HTMLGxgFormTextareaElement;
    new (): HTMLGxgFormTextareaElement;
  };
  interface HTMLGxgIconElement extends Components.GxgIcon, HTMLStencilElement {}
  var HTMLGxgIconElement: {
    prototype: HTMLGxgIconElement;
    new (): HTMLGxgIconElement;
  };
  interface HTMLGxgMenuElement extends Components.GxgMenu, HTMLStencilElement {}
  var HTMLGxgMenuElement: {
    prototype: HTMLGxgMenuElement;
    new (): HTMLGxgMenuElement;
  };
  interface HTMLGxgMenuItemElement
    extends Components.GxgMenuItem,
      HTMLStencilElement {}
  var HTMLGxgMenuItemElement: {
    prototype: HTMLGxgMenuItemElement;
    new (): HTMLGxgMenuItemElement;
  };
  interface HTMLGxgModalElement
    extends Components.GxgModal,
      HTMLStencilElement {}
  var HTMLGxgModalElement: {
    prototype: HTMLGxgModalElement;
    new (): HTMLGxgModalElement;
  };
  interface HTMLGxgMoreInfoElement
    extends Components.GxgMoreInfo,
      HTMLStencilElement {}
  var HTMLGxgMoreInfoElement: {
    prototype: HTMLGxgMoreInfoElement;
    new (): HTMLGxgMoreInfoElement;
  };
  interface HTMLGxgOptionElement
    extends Components.GxgOption,
      HTMLStencilElement {}
  var HTMLGxgOptionElement: {
    prototype: HTMLGxgOptionElement;
    new (): HTMLGxgOptionElement;
  };
  interface HTMLGxgPillElement extends Components.GxgPill, HTMLStencilElement {}
  var HTMLGxgPillElement: {
    prototype: HTMLGxgPillElement;
    new (): HTMLGxgPillElement;
  };
  interface HTMLGxgProgressBarElement
    extends Components.GxgProgressBar,
      HTMLStencilElement {}
  var HTMLGxgProgressBarElement: {
    prototype: HTMLGxgProgressBarElement;
    new (): HTMLGxgProgressBarElement;
  };
  interface HTMLGxgScrollElement
    extends Components.GxgScroll,
      HTMLStencilElement {}
  var HTMLGxgScrollElement: {
    prototype: HTMLGxgScrollElement;
    new (): HTMLGxgScrollElement;
  };
  interface HTMLGxgSelectElement
    extends Components.GxgSelect,
      HTMLStencilElement {}
  var HTMLGxgSelectElement: {
    prototype: HTMLGxgSelectElement;
    new (): HTMLGxgSelectElement;
  };
  interface HTMLGxgSeparatorElement
    extends Components.GxgSeparator,
      HTMLStencilElement {}
  var HTMLGxgSeparatorElement: {
    prototype: HTMLGxgSeparatorElement;
    new (): HTMLGxgSeparatorElement;
  };
  interface HTMLGxgSliderElement
    extends Components.GxgSlider,
      HTMLStencilElement {}
  var HTMLGxgSliderElement: {
    prototype: HTMLGxgSliderElement;
    new (): HTMLGxgSliderElement;
  };
  interface HTMLGxgSpacerLayoutElement
    extends Components.GxgSpacerLayout,
      HTMLStencilElement {}
  var HTMLGxgSpacerLayoutElement: {
    prototype: HTMLGxgSpacerLayoutElement;
    new (): HTMLGxgSpacerLayoutElement;
  };
  interface HTMLGxgSpacerOneElement
    extends Components.GxgSpacerOne,
      HTMLStencilElement {}
  var HTMLGxgSpacerOneElement: {
    prototype: HTMLGxgSpacerOneElement;
    new (): HTMLGxgSpacerOneElement;
  };
  interface HTMLGxgStackElement
    extends Components.GxgStack,
      HTMLStencilElement {}
  var HTMLGxgStackElement: {
    prototype: HTMLGxgStackElement;
    new (): HTMLGxgStackElement;
  };
  interface HTMLGxgStepperElement
    extends Components.GxgStepper,
      HTMLStencilElement {}
  var HTMLGxgStepperElement: {
    prototype: HTMLGxgStepperElement;
    new (): HTMLGxgStepperElement;
  };
  interface HTMLGxgTabElement extends Components.GxgTab, HTMLStencilElement {}
  var HTMLGxgTabElement: {
    prototype: HTMLGxgTabElement;
    new (): HTMLGxgTabElement;
  };
  interface HTMLGxgTabBarElement
    extends Components.GxgTabBar,
      HTMLStencilElement {}
  var HTMLGxgTabBarElement: {
    prototype: HTMLGxgTabBarElement;
    new (): HTMLGxgTabBarElement;
  };
  interface HTMLGxgTabButtonElement
    extends Components.GxgTabButton,
      HTMLStencilElement {}
  var HTMLGxgTabButtonElement: {
    prototype: HTMLGxgTabButtonElement;
    new (): HTMLGxgTabButtonElement;
  };
  interface HTMLGxgTabsElement extends Components.GxgTabs, HTMLStencilElement {}
  var HTMLGxgTabsElement: {
    prototype: HTMLGxgTabsElement;
    new (): HTMLGxgTabsElement;
  };
  interface HTMLGxgTextElement extends Components.GxgText, HTMLStencilElement {}
  var HTMLGxgTextElement: {
    prototype: HTMLGxgTextElement;
    new (): HTMLGxgTextElement;
  };
  interface HTMLGxgTitleElement
    extends Components.GxgTitle,
      HTMLStencilElement {}
  var HTMLGxgTitleElement: {
    prototype: HTMLGxgTitleElement;
    new (): HTMLGxgTitleElement;
  };
  interface HTMLGxgToggleElement
    extends Components.GxgToggle,
      HTMLStencilElement {}
  var HTMLGxgToggleElement: {
    prototype: HTMLGxgToggleElement;
    new (): HTMLGxgToggleElement;
  };
  interface HTMLGxgToolbarElement
    extends Components.GxgToolbar,
      HTMLStencilElement {}
  var HTMLGxgToolbarElement: {
    prototype: HTMLGxgToolbarElement;
    new (): HTMLGxgToolbarElement;
  };
  interface HTMLGxgToolbarItemElement
    extends Components.GxgToolbarItem,
      HTMLStencilElement {}
  var HTMLGxgToolbarItemElement: {
    prototype: HTMLGxgToolbarItemElement;
    new (): HTMLGxgToolbarItemElement;
  };
  interface HTMLGxgTooltipElement
    extends Components.GxgTooltip,
      HTMLStencilElement {}
  var HTMLGxgTooltipElement: {
    prototype: HTMLGxgTooltipElement;
    new (): HTMLGxgTooltipElement;
  };
  interface HTMLGxgTreeElement extends Components.GxgTree, HTMLStencilElement {}
  var HTMLGxgTreeElement: {
    prototype: HTMLGxgTreeElement;
    new (): HTMLGxgTreeElement;
  };
  interface HTMLGxgTreeItemElement
    extends Components.GxgTreeItem,
      HTMLStencilElement {}
  var HTMLGxgTreeItemElement: {
    prototype: HTMLGxgTreeItemElement;
    new (): HTMLGxgTreeItemElement;
  };
  interface HTMLElementTagNameMap {
    "gxg-accordion": HTMLGxgAccordionElement;
    "gxg-accordion-item": HTMLGxgAccordionItemElement;
    "gxg-alert": HTMLGxgAlertElement;
    "gxg-box": HTMLGxgBoxElement;
    "gxg-button": HTMLGxgButtonElement;
    "gxg-button-group": HTMLGxgButtonGroupElement;
    "gxg-card": HTMLGxgCardElement;
    "gxg-color-picker": HTMLGxgColorPickerElement;
    "gxg-column": HTMLGxgColumnElement;
    "gxg-columns": HTMLGxgColumnsElement;
    "gxg-date-picker": HTMLGxgDatePickerElement;
    "gxg-drag-box": HTMLGxgDragBoxElement;
    "gxg-drag-container": HTMLGxgDragContainerElement;
    "gxg-form-checkbox": HTMLGxgFormCheckboxElement;
    "gxg-form-message": HTMLGxgFormMessageElement;
    "gxg-form-radio": HTMLGxgFormRadioElement;
    "gxg-form-radio-group": HTMLGxgFormRadioGroupElement;
    "gxg-form-text": HTMLGxgFormTextElement;
    "gxg-form-textarea": HTMLGxgFormTextareaElement;
    "gxg-icon": HTMLGxgIconElement;
    "gxg-menu": HTMLGxgMenuElement;
    "gxg-menu-item": HTMLGxgMenuItemElement;
    "gxg-modal": HTMLGxgModalElement;
    "gxg-more-info": HTMLGxgMoreInfoElement;
    "gxg-option": HTMLGxgOptionElement;
    "gxg-pill": HTMLGxgPillElement;
    "gxg-progress-bar": HTMLGxgProgressBarElement;
    "gxg-scroll": HTMLGxgScrollElement;
    "gxg-select": HTMLGxgSelectElement;
    "gxg-separator": HTMLGxgSeparatorElement;
    "gxg-slider": HTMLGxgSliderElement;
    "gxg-spacer-layout": HTMLGxgSpacerLayoutElement;
    "gxg-spacer-one": HTMLGxgSpacerOneElement;
    "gxg-stack": HTMLGxgStackElement;
    "gxg-stepper": HTMLGxgStepperElement;
    "gxg-tab": HTMLGxgTabElement;
    "gxg-tab-bar": HTMLGxgTabBarElement;
    "gxg-tab-button": HTMLGxgTabButtonElement;
    "gxg-tabs": HTMLGxgTabsElement;
    "gxg-text": HTMLGxgTextElement;
    "gxg-title": HTMLGxgTitleElement;
    "gxg-toggle": HTMLGxgToggleElement;
    "gxg-toolbar": HTMLGxgToolbarElement;
    "gxg-toolbar-item": HTMLGxgToolbarItemElement;
    "gxg-tooltip": HTMLGxgTooltipElement;
    "gxg-tree": HTMLGxgTreeElement;
    "gxg-tree-item": HTMLGxgTreeItemElement;
  }
}
declare namespace LocalJSX {
  interface GxgAccordion {
    /**
     * The presence of this attribute makes all of the accordion-items disabled and not focusable
     */
    disabled?: boolean;
    /**
     * The accordion max-width
     */
    maxWidth?: string;
    /**
     * The accordion flavor
     */
    mode?: mode;
    padding?: padding;
    /**
     * If this attribute is present, only one accordion-item can be open at the same time
     */
    singleItemOpen?: boolean;
  }
  interface GxgAccordionItem {
    /**
     * The presence of this attribute makes the accordion-item disabled and not focusable
     */
    disabled?: boolean;
    /**
     * The presence of this attribute makes the accordion title editable
     */
    editableTitle?: boolean;
    /**
     * The accordion id
     */
    itemId: string;
    /**
     * The accordion title
     */
    itemTitle?: string;
    /**
     * The accordion flavor (No need to set this attribute on each of the the accordion-item's, only once at gxg-accordion)
     */
    mode?: mode;
    /**
     * This event is for internal use
     */
    onAccordionItemClicked?: (event: CustomEvent<any>) => void;
    /**
     * This event is for internal use
     */
    onAccordionItemLoaded?: (event: CustomEvent<any>) => void;
    /**
     * Subscribe to this event to know when the "title" was clicked
     */
    onAccordionTitleClicked?: (event: CustomEvent<any>) => void;
    padding?: padding;
    /**
     * Set the status to "open" if you want the accordion-item open by default
     */
    status?: status;
  }
  interface GxgAlert {
    /**
     * Wether the alert is active (visible) or hidden
     */
    active?: boolean;
    /**
     * The amount of time the alert is visible before hidding under the document
     */
    activeTime?: ActiveTime;
    /**
     * The alert title (optional)
     */
    alertTitle?: string;
    /**
     * The spacing between the alert and the bottom side of the document
     */
    bottom?: Spacing;
    /**
     * The presence of this attribute makes the component full-width
     */
    fullWidth?: boolean;
    /**
     * The spacing between the alert, and the left or right side of the document
     */
    leftRight?: Spacing;
    /**
     * The alert position on the X axis
     */
    position?: AlertPosition;
    /**
     * The alert flavor
     */
    type?: AlertType;
    /**
     * The alert width
     */
    width?: string;
  }
  interface GxgBox {
    /**
     * The background color
     */
    background?: background;
    /**
     * The border type
     */
    border?: border;
    /**
     * The component max. width
     */
    maxWidth?: string;
    /**
     * The component min. height
     */
    minHeight?: string;
    padding?: padding;
  }
  interface GxgButton {
    /**
     * The prescence of this attribute makes the icon always black
     */
    alwaysBlack?: boolean;
    /**
     * The state of the button, whether it is disabled or not
     */
    disabled?: boolean;
    /**
     * The presence of this attribute makes the component full-width
     */
    fullWidth?: boolean;
    /**
     * The button icon
     */
    icon?: IconType;
    /**
     * The kind of button
     */
    type?: ButtonType;
  }
  interface GxgButtonGroup {
    /**
     * The button-group title
     */
    buttonGroupTitle?: string;
    /**
     * The id of the button that you would like to be active by default
     */
    defaultSelectedBtnId?: string;
    /**
     * Wether the button group is disabled or not
     */
    disabled?: boolean;
    /**
     * The presence of this attribute makes the component full-width
     */
    fullWidth?: boolean;
    /**
     * The presence of this attribute makes the button group outlined
     */
    outlined?: boolean;
    /**
     * The button group title alignment
     */
    titleAlignment?: TitleAlignment;
  }
  interface GxgCard {
    /**
     * The background color
     */
    background?: background;
    /**
     * The card box-shadow
     */
    elevation?: elevation;
    /**
     * The component max. width
     */
    maxWidth?: string;
    /**
     * The component min. height
     */
    minHeight?: string;
    /**
     * The card padding (internal spacing)
     */
    padding?: padding;
  }
  interface GxgColorPicker {
    /**
     * The label of the color picker (optional)
     */
    label?: string;
    onChange?: (event: CustomEvent<any>) => void;
    onNameInputEvent?: (event: CustomEvent<any>) => void;
    onSave?: (event: CustomEvent<any>) => void;
    /**
     * The color value, such as "red", #CCDDEE, or rgba(220,140,40,.5)
     */
    value?: string;
  }
  interface GxgColumn {
    /**
     * The column padding (internal spacing)
     */
    padding?: padding;
    /**
     * The column width value
     */
    width?: WidthType;
  }
  interface GxgColumns {
    /**
     * The vertical alignment
     */
    alignY?: AlignY;
    /**
     * The collapse breakpoint
     */
    collapseBellow?: CollapseBellow;
    padding?: padding;
    /**
     * The spacing between columns
     */
    space?: Space;
  }
  interface GxgDatePicker {
    /**
     * The presence of this attribute makes the date-picker always visible
     */
    alwaysShow?: boolean;
    /**
     * initial date
     */
    defaultDate?: string;
    /**
     * The datepicker label
     */
    label?: string;
    /**
     * The max. date
     */
    maxDate?: string;
    /**
     * The max. width
     */
    maxWidth?: string;
    /**
     * The min. date
     */
    minDate?: string;
    /**
     * no weekends available
     */
    noWeekends?: boolean;
  }
  interface GxgDragBox {
    /**
     * The presence of this attribute makes this box active
     */
    active?: boolean;
    /**
     * The presence of this attribute adds a "delete" button that you can press to delete the box
     */
    deletable?: boolean;
    onClicked?: (event: CustomEvent<any>) => void;
    /**
     * This event fires when a box has been deleted
     */
    onDeleted?: (event: CustomEvent<any>) => void;
    /**
     * The padding (internal spacing)
     */
    padding?: Padding;
    /**
     * The title
     */
    title?: string;
  }
  interface GxgDragContainer {
    /**
     * The presence of this attribute adds a "delete" button to each child, that you can press to delete the item
     */
    deletable?: boolean;
    /**
     * The max-width of the box container
     */
    maxWidth?: string;
    onItemDragEnter?: (event: CustomEvent<any>) => void;
    onItemDragLeave?: (event: CustomEvent<any>) => void;
    onItemDragOver?: (event: CustomEvent<any>) => void;
    onItemDragStart?: (event: CustomEvent<any>) => void;
    onItemDrop?: (event: CustomEvent<any>) => void;
    padding?: Padding;
  }
  interface GxgFormCheckbox {
    /**
     * The checkbox id
     */
    checkboxId?: string;
    /**
     * The presence of this attribute makes the checkbox checked by default
     */
    checked?: boolean;
    /**
     * The presence of this attribute disables the checkbox
     */
    disabled?: boolean;
    /**
     * The checkbox label
     */
    label?: string;
    /**
     * The checkbox name
     */
    name?: string;
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * The checkbox value
     */
    value?: string;
  }
  interface GxgFormMessage {
    /**
     * The type of message
     */
    type?: Message;
  }
  interface GxgFormRadio {
    /**
     * The radio id
     */
    RadioId?: string;
    /**
     * The presence of this attribute makes the radio selected by default
     */
    checked?: boolean;
    /**
     * The presence of this attribute disables the radio
     */
    disabled?: boolean;
    /**
     * The radio label
     */
    label?: string;
    /**
     * The radio name (should be the same for every radio of the same radio-group)
     */
    name?: string;
    /**
     * Returns an object with the radio value, and radio id
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * (This event is for internal use)
     */
    onChangeInternal?: (event: CustomEvent<any>) => void;
    /**
     * (This event is for internal use)
     */
    onKeyPressed?: (event: CustomEvent<any>) => void;
    /**
     * Make the radio-button required
     */
    required?: boolean;
    /**
     * The radio value
     */
    value?: string;
  }
  interface GxgFormRadioGroup {
    /**
     * The radio group label
     */
    label?: string;
    /**
     * Make the radio-buttons required
     */
    required?: boolean;
    /**
     * The required message if this input is required and no value is provided (optional). If this is not provided, the default browser required message will show up
     */
    requiredMessage?: string;
  }
  interface GxgFormText {
    /**
     * The presence of this attribute displays a clear (cross) button-icon on the right side
     */
    clearButton?: boolean;
    /**
     * The presence of this attribute makes the input disabled
     */
    disabled?: boolean;
    /**
     * The presence of this attribute gives the component error styles
     */
    error?: boolean;
    /**
     * The input icon (optional)
     */
    icon?: IconType;
    /**
     * The input icon side
     */
    iconPosition?: IconPosition;
    /**
     * The input label
     */
    label?: string;
    /**
     * The input max. width
     */
    maxWidth?: string;
    /**
     * The presence of this attribute hides the border, and sets the background to transparent when the element has no focus
     */
    minimal?: boolean;
    /**
     * Returns the input value
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * The clear button was clicked
     */
    onClearButtonClicked?: (event: CustomEvent<any>) => void;
    /**
     * Returns the input value
     */
    onInput?: (event: CustomEvent<any>) => void;
    /**
     * The input placeholder
     */
    placeholder?: string;
    /**
     * The presence of this attribute makes this input required
     */
    required?: boolean;
    /**
     * The required message if this input is required and no value is provided (optional). If this is not provided, the default browser required message will show up
     */
    requiredMessage?: string;
    /**
     * The input value
     */
    value?: string;
    /**
     * The presence of this attribute gives the component warning styles
     */
    warning?: boolean;
  }
  interface GxgFormTextarea {
    /**
     * The presence of this attribute makes the textarea disabled
     */
    disabled?: boolean;
    /**
     * The presence of this attribute gives the component error styles
     */
    error?: boolean;
    /**
     * The textarea label
     */
    label?: string;
    /**
     * The max-width
     */
    maxWidth?: string;
    /**
     * Returns the textarea value
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * Returns the textarea value
     */
    onInput?: (event: CustomEvent<any>) => void;
    /**
     * The textarea placeholder
     */
    placeholder?: string;
    /**
     * The presence of this attribute makes the textarea required
     */
    required?: boolean;
    /**
     * The required message if this input is required and no value is provided (optional). If this is not provided, the default browser required message will show up
     */
    requiredMessage?: string;
    /**
     * The number of rows
     */
    rows?: number;
    /**
     * The textarea value
     */
    value?: string;
    /**
     * The presence of this attribute gives the component warning styles
     */
    warning?: boolean;
  }
  interface GxgIcon {
    /**
     * The color of the icon.
     */
    color?: Color;
    /**
     * If enabled, the icon will be loaded lazily when it's visible in the viewport.
     */
    lazy?: boolean;
    /**
     * The size of the icon. Possible values: regular, small.
     */
    size?: Size;
    /**
     * The type of icon. Possible values: each of the icons in /assets.
     */
    type?: IconType;
  }
  interface GxgMenu {
    /**
     * The menu title
     */
    menuTitle?: string;
    /**
     * Provide this attribute if you are using this menu on the tabs component
     */
    tabs?: boolean;
  }
  interface GxgMenuItem {
    active?: boolean;
    icon?: IconType;
    label?: string;
    onMenuItemActive?: (event: CustomEvent<any>) => void;
  }
  interface GxgModal {
    /**
     * The modal title
     */
    modalTitle?: string;
    padding?: padding;
    /**
     * Wether the modal is visible or not
     */
    visible?: boolean;
    /**
     * The modal width
     */
    width?: string;
    /**
     * The z-index value of the modal
     */
    zIndex?: string;
  }
  interface GxgMoreInfo {
    /**
     * The label
     */
    label?: string;
    /**
     * the tooltip position
     */
    position?: position;
  }
  interface GxgOption {
    /**
     * The presence of this attribute makes the option selected by default
     */
    selected?: boolean;
    /**
     * The value
     */
    value?: string;
  }
  interface GxgPill {
    /**
     * The presence of this attribute disables the pillgit a
     */
    disabled?: boolean;
    /**
     * The icon
     */
    icon?: PillIconType;
    /**
     * The presence of this attribute ads a close button that when clicked, removes the pill
     */
    type?: PillType;
  }
  interface GxgProgressBar {
    /**
     * The state of the progress-bar, whether it is disabled or not.
     */
    disabled?: boolean;
    /**
     * The progress-bar label
     */
    label?: string;
    /**
     * The max. width
     */
    maxWidth?: string;
    /**
     * The progress value (percentage)
     */
    value?: number;
  }
  interface GxgScroll {
    /**
     * Max height
     */
    maxHeight?: string;
  }
  interface GxgSelect {
    /**
     * The presence of this attribute disables the component
     */
    disabled?: boolean;
    /**
     * The presence of this attribute stylizes the component with error attributes
     */
    error?: boolean;
    /**
     * The select label
     */
    label?: string;
    /**
     * The select max. width
     */
    maxWidth?: string;
    /**
     * The presence of this attribute hides the border, and sets the background to transparent when the element has no focus
     */
    minimal?: boolean;
    /**
     * Returns the value of the selected option
     */
    onChange?: (event: CustomEvent<any>) => void;
    /**
     * The presence of this attribute makes this input required
     */
    required?: boolean;
    /**
     * The maximum number of visible options
     */
    size?: string;
    /**
     * This holds the value of the selected option
     */
    value?: string;
    /**
     * The presence of this attribute stylizes the component with warning attributes
     */
    warning?: boolean;
  }
  interface GxgSeparator {
    /**
     * The hr top and bottom margin
     */
    margin?: margin;
    /**
     * The hr style
     */
    type?: string;
  }
  interface GxgSlider {
    /**
     * The state of the slider, whether is disabled or not.
     */
    disabled?: boolean;
    /**
     * The label
     */
    label?: string;
    /**
     * The max. value
     */
    max?: number;
    /**
     * The slider max. width
     */
    maxWidth?: string;
    /**
     * The initial value
     */
    value?: number;
  }
  interface GxgSpacerLayout {
    /**
     * Add this attribute to make the spacer-layout full height
     */
    fullHeight?: boolean;
    /**
     * Content justify
     */
    justifyContent?: string;
    /**
     * The orientation
     */
    orientation?: string;
    /**
     * The spacing value, taken from the "token-spacing" global values
     */
    space?: string;
  }
  interface GxgSpacerOne {
    /**
     * The spacing value, taken from the "token-spacing" global values
     */
    space?: string;
  }
  interface GxgStack {
    /**
     * The spacing value
     */
    space?: Space;
  }
  interface GxgStepper {
    /**
     * The state of the stepper, whether is disabled or not.
     */
    disabled?: boolean;
    /**
     * The label
     */
    label?: string;
    /**
     * The max. value
     */
    max?: number;
    /**
     * The min. value
     */
    min?: number;
    onInput?: (event: CustomEvent<any>) => void;
    /**
     * The initial vaule
     */
    value?: number;
  }
  interface GxgTab {
    isSelected?: boolean;
    /**
     * The tab id. Should match the "tab" value of the correlative "gxg-tab"
     */
    tab?: string;
  }
  interface GxgTabBar {}
  interface GxgTabButton {
    /**
     * Provide this attribute to make this button disabled
     */
    disabled?: boolean;
    /**
     * (Optional) provide an icon to this button
     */
    icon?: IconType;
    /**
     * Provide this attribute to make this button selected by default
     */
    isSelected?: boolean;
    onTabActivated?: (event: CustomEvent<any>) => void;
    /**
     * The tab id. Should match the "tab" value of the correlative "gxg-tab" element
     */
    tab?: string;
    /**
     * The button label
     */
    tabLabel?: string;
  }
  interface GxgTabs {}
  interface GxgText {
    /**
     * The href (for "link" or "link-gray" types
     */
    href?: string;
    /**
     * The target (for "link" or "link-gray" types
     */
    target?: TargetType;
    /**
     * Title type
     */
    type?: TextType;
  }
  interface GxgTitle {
    /**
     * Title type
     */
    type?: TitleType;
  }
  interface GxgToggle {
    /**
     * The state of the toggle. Whether is disabled or not.
     */
    disabled?: boolean;
    /**
     * The label
     */
    label?: string;
    /**
     * If the toggle is active or not
     */
    on?: boolean;
    /**
     * The label
     */
    size?: Size;
  }
  interface GxgToolbar {
    /**
     * The state of the toggle, wether is disabled or not
     */
    disabled?: boolean;
    /**
     * The toggle arrow position
     */
    position?: string;
    /**
     * The toolbar title
     */
    subtitle?: string;
    /**
     * The toolbar subtitle
     */
    toolbarTitle?: string;
  }
  interface GxgToolbarItem {
    /**
     * The state of the toolbar-item, whether it is disabled or not
     */
    disabled?: boolean;
    /**
     * The toolbar-item icon
     */
    icon?: IconType;
    /**
     * The toolbar-item subtitle
     */
    subtitle?: string;
    /**
     * The toolbar-item title
     */
    toolbarItemTitle?: string;
  }
  interface GxgTooltip {
    /**
     * The label
     */
    label?: string;
    /**
     * This presence of this property removes the border under the text
     */
    noBorder?: boolean;
    /**
     * the tooltip position
     */
    position?: position;
  }
  interface GxgTree {}
  interface GxgTreeItem {
    /**
     * The state of the tree-item, wether it is disabled or not
     */
    disabled?: boolean;
    /**
     * The tree item icon
     */
    icon?: IconType;
    /**
     * (This event is for internal use)
     */
    onItemClicked?: (event: CustomEvent<any>) => void;
  }
  interface IntrinsicElements {
    "gxg-accordion": GxgAccordion;
    "gxg-accordion-item": GxgAccordionItem;
    "gxg-alert": GxgAlert;
    "gxg-box": GxgBox;
    "gxg-button": GxgButton;
    "gxg-button-group": GxgButtonGroup;
    "gxg-card": GxgCard;
    "gxg-color-picker": GxgColorPicker;
    "gxg-column": GxgColumn;
    "gxg-columns": GxgColumns;
    "gxg-date-picker": GxgDatePicker;
    "gxg-drag-box": GxgDragBox;
    "gxg-drag-container": GxgDragContainer;
    "gxg-form-checkbox": GxgFormCheckbox;
    "gxg-form-message": GxgFormMessage;
    "gxg-form-radio": GxgFormRadio;
    "gxg-form-radio-group": GxgFormRadioGroup;
    "gxg-form-text": GxgFormText;
    "gxg-form-textarea": GxgFormTextarea;
    "gxg-icon": GxgIcon;
    "gxg-menu": GxgMenu;
    "gxg-menu-item": GxgMenuItem;
    "gxg-modal": GxgModal;
    "gxg-more-info": GxgMoreInfo;
    "gxg-option": GxgOption;
    "gxg-pill": GxgPill;
    "gxg-progress-bar": GxgProgressBar;
    "gxg-scroll": GxgScroll;
    "gxg-select": GxgSelect;
    "gxg-separator": GxgSeparator;
    "gxg-slider": GxgSlider;
    "gxg-spacer-layout": GxgSpacerLayout;
    "gxg-spacer-one": GxgSpacerOne;
    "gxg-stack": GxgStack;
    "gxg-stepper": GxgStepper;
    "gxg-tab": GxgTab;
    "gxg-tab-bar": GxgTabBar;
    "gxg-tab-button": GxgTabButton;
    "gxg-tabs": GxgTabs;
    "gxg-text": GxgText;
    "gxg-title": GxgTitle;
    "gxg-toggle": GxgToggle;
    "gxg-toolbar": GxgToolbar;
    "gxg-toolbar-item": GxgToolbarItem;
    "gxg-tooltip": GxgTooltip;
    "gxg-tree": GxgTree;
    "gxg-tree-item": GxgTreeItem;
  }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      "gxg-accordion": LocalJSX.GxgAccordion &
        JSXBase.HTMLAttributes<HTMLGxgAccordionElement>;
      "gxg-accordion-item": LocalJSX.GxgAccordionItem &
        JSXBase.HTMLAttributes<HTMLGxgAccordionItemElement>;
      "gxg-alert": LocalJSX.GxgAlert &
        JSXBase.HTMLAttributes<HTMLGxgAlertElement>;
      "gxg-box": LocalJSX.GxgBox & JSXBase.HTMLAttributes<HTMLGxgBoxElement>;
      "gxg-button": LocalJSX.GxgButton &
        JSXBase.HTMLAttributes<HTMLGxgButtonElement>;
      "gxg-button-group": LocalJSX.GxgButtonGroup &
        JSXBase.HTMLAttributes<HTMLGxgButtonGroupElement>;
      "gxg-card": LocalJSX.GxgCard & JSXBase.HTMLAttributes<HTMLGxgCardElement>;
      "gxg-color-picker": LocalJSX.GxgColorPicker &
        JSXBase.HTMLAttributes<HTMLGxgColorPickerElement>;
      "gxg-column": LocalJSX.GxgColumn &
        JSXBase.HTMLAttributes<HTMLGxgColumnElement>;
      "gxg-columns": LocalJSX.GxgColumns &
        JSXBase.HTMLAttributes<HTMLGxgColumnsElement>;
      "gxg-date-picker": LocalJSX.GxgDatePicker &
        JSXBase.HTMLAttributes<HTMLGxgDatePickerElement>;
      "gxg-drag-box": LocalJSX.GxgDragBox &
        JSXBase.HTMLAttributes<HTMLGxgDragBoxElement>;
      "gxg-drag-container": LocalJSX.GxgDragContainer &
        JSXBase.HTMLAttributes<HTMLGxgDragContainerElement>;
      "gxg-form-checkbox": LocalJSX.GxgFormCheckbox &
        JSXBase.HTMLAttributes<HTMLGxgFormCheckboxElement>;
      "gxg-form-message": LocalJSX.GxgFormMessage &
        JSXBase.HTMLAttributes<HTMLGxgFormMessageElement>;
      "gxg-form-radio": LocalJSX.GxgFormRadio &
        JSXBase.HTMLAttributes<HTMLGxgFormRadioElement>;
      "gxg-form-radio-group": LocalJSX.GxgFormRadioGroup &
        JSXBase.HTMLAttributes<HTMLGxgFormRadioGroupElement>;
      "gxg-form-text": LocalJSX.GxgFormText &
        JSXBase.HTMLAttributes<HTMLGxgFormTextElement>;
      "gxg-form-textarea": LocalJSX.GxgFormTextarea &
        JSXBase.HTMLAttributes<HTMLGxgFormTextareaElement>;
      "gxg-icon": LocalJSX.GxgIcon & JSXBase.HTMLAttributes<HTMLGxgIconElement>;
      "gxg-menu": LocalJSX.GxgMenu & JSXBase.HTMLAttributes<HTMLGxgMenuElement>;
      "gxg-menu-item": LocalJSX.GxgMenuItem &
        JSXBase.HTMLAttributes<HTMLGxgMenuItemElement>;
      "gxg-modal": LocalJSX.GxgModal &
        JSXBase.HTMLAttributes<HTMLGxgModalElement>;
      "gxg-more-info": LocalJSX.GxgMoreInfo &
        JSXBase.HTMLAttributes<HTMLGxgMoreInfoElement>;
      "gxg-option": LocalJSX.GxgOption &
        JSXBase.HTMLAttributes<HTMLGxgOptionElement>;
      "gxg-pill": LocalJSX.GxgPill & JSXBase.HTMLAttributes<HTMLGxgPillElement>;
      "gxg-progress-bar": LocalJSX.GxgProgressBar &
        JSXBase.HTMLAttributes<HTMLGxgProgressBarElement>;
      "gxg-scroll": LocalJSX.GxgScroll &
        JSXBase.HTMLAttributes<HTMLGxgScrollElement>;
      "gxg-select": LocalJSX.GxgSelect &
        JSXBase.HTMLAttributes<HTMLGxgSelectElement>;
      "gxg-separator": LocalJSX.GxgSeparator &
        JSXBase.HTMLAttributes<HTMLGxgSeparatorElement>;
      "gxg-slider": LocalJSX.GxgSlider &
        JSXBase.HTMLAttributes<HTMLGxgSliderElement>;
      "gxg-spacer-layout": LocalJSX.GxgSpacerLayout &
        JSXBase.HTMLAttributes<HTMLGxgSpacerLayoutElement>;
      "gxg-spacer-one": LocalJSX.GxgSpacerOne &
        JSXBase.HTMLAttributes<HTMLGxgSpacerOneElement>;
      "gxg-stack": LocalJSX.GxgStack &
        JSXBase.HTMLAttributes<HTMLGxgStackElement>;
      "gxg-stepper": LocalJSX.GxgStepper &
        JSXBase.HTMLAttributes<HTMLGxgStepperElement>;
      "gxg-tab": LocalJSX.GxgTab & JSXBase.HTMLAttributes<HTMLGxgTabElement>;
      "gxg-tab-bar": LocalJSX.GxgTabBar &
        JSXBase.HTMLAttributes<HTMLGxgTabBarElement>;
      "gxg-tab-button": LocalJSX.GxgTabButton &
        JSXBase.HTMLAttributes<HTMLGxgTabButtonElement>;
      "gxg-tabs": LocalJSX.GxgTabs & JSXBase.HTMLAttributes<HTMLGxgTabsElement>;
      "gxg-text": LocalJSX.GxgText & JSXBase.HTMLAttributes<HTMLGxgTextElement>;
      "gxg-title": LocalJSX.GxgTitle &
        JSXBase.HTMLAttributes<HTMLGxgTitleElement>;
      "gxg-toggle": LocalJSX.GxgToggle &
        JSXBase.HTMLAttributes<HTMLGxgToggleElement>;
      "gxg-toolbar": LocalJSX.GxgToolbar &
        JSXBase.HTMLAttributes<HTMLGxgToolbarElement>;
      "gxg-toolbar-item": LocalJSX.GxgToolbarItem &
        JSXBase.HTMLAttributes<HTMLGxgToolbarItemElement>;
      "gxg-tooltip": LocalJSX.GxgTooltip &
        JSXBase.HTMLAttributes<HTMLGxgTooltipElement>;
      "gxg-tree": LocalJSX.GxgTree & JSXBase.HTMLAttributes<HTMLGxgTreeElement>;
      "gxg-tree-item": LocalJSX.GxgTreeItem &
        JSXBase.HTMLAttributes<HTMLGxgTreeItemElement>;
    }
  }
}
